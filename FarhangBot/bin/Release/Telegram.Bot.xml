<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telegram.Bot</name>
    </assembly>
    <members>
        <member name="T:Telegram.Bot.Args.ApiRequestEventArgs">
            <summary>
            Provides data for MakingApiRequest event
            </summary>
        </member>
        <member name="P:Telegram.Bot.Args.ApiRequestEventArgs.MethodName">
            <summary>
            Bot API method name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Args.ApiRequestEventArgs.HttpContent">
            <summary>
            HTTP content of the request message
            </summary>
        </member>
        <member name="M:Telegram.Bot.Args.ApiRequestEventArgs.#ctor(System.String,System.Net.Http.HttpContent)">
             <summary>
            
             </summary>
             <param name="methodName"></param>
             <param name="httpContent"></param>
        </member>
        <member name="T:Telegram.Bot.Args.ApiResponseEventArgs">
            <summary>
            Provides data for ApiResponseReceived event
            </summary>
        </member>
        <member name="P:Telegram.Bot.Args.ApiResponseEventArgs.ResponseMessage">
            <summary>
            HTTP response received from API
            </summary>
        </member>
        <member name="P:Telegram.Bot.Args.ApiResponseEventArgs.ApiRequestEventArgs">
            <summary>
            Event arguments of this request
            </summary>
        </member>
        <member name="M:Telegram.Bot.Args.ApiResponseEventArgs.#ctor(System.Net.Http.HttpResponseMessage,Telegram.Bot.Args.ApiRequestEventArgs)">
            <summary>
            Initialize an <see cref="P:Telegram.Bot.Args.ApiResponseEventArgs.ApiRequestEventArgs"/> object
            </summary>
            <param name="responseMessage">HTTP response received from API</param>
            <param name="apiRequestEventArgs">Event arguments of this request</param>
        </member>
        <member name="T:Telegram.Bot.Exceptions.ApiRequestException">
            <summary>
            Represents an API error
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiRequestException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiRequestException.Parameters">
            <summary>
            Contains information about why a request was unsuccessful.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic)
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,Telegram.Bot.Types.ResponseParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class
            </summary>
            <param name="message">The message</param>
            <param name="errorCode">The error code</param>
            <param name="parameters">Response parameters</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,Telegram.Bot.Types.ResponseParameters,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class
            </summary>
            <param name="message">The message</param>
            <param name="errorCode">The error code</param>
            <param name="parameters">Response parameters</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Telegram.Bot.Exceptions.ApiResponse">
            <summary>
            Represents failed API response
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiResponse.Description">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiResponse.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiResponse.Parameters">
            <summary>
            Contains information about why a request was unsuccessful.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiResponse.#ctor(System.Int32,System.String,Telegram.Bot.Types.ResponseParameters)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Exceptions.ApiResponse"/>
            </summary>
            <param name="errorCode">Error code</param>
            <param name="description">Error message</param>
            <param name="parameters">Information about why a request was unsuccessful</param>
        </member>
        <member name="T:Telegram.Bot.Exceptions.IExceptionParser">
            <summary>
            Parses unsuccessful responses from Telegram Bot API to make specific exceptions
            </summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.IExceptionParser.Parse(Telegram.Bot.Exceptions.ApiResponse)">
            <summary>
            Parses HTTP response and constructs a specific exception out of it
            </summary>
            <param name="apiResponse">ApiResponse with an error</param>
            <returns></returns>
        </member>
        <member name="T:Telegram.Bot.Exceptions.RequestException">
            <summary>
            Represents a request error
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode">
            <summary>
            <see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response
            </summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="httpStatusCode">
            <see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response
            </param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="httpStatusCode">
            <see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:Telegram.Bot.Helpers.Extensions">
            <summary>
            Extension Methods
            </summary>
        </member>
        <member name="M:Telegram.Bot.Helpers.Extensions.DeserializeContentAsync``1(System.Net.Http.HttpResponseMessage,System.Func{``0,System.Boolean})">
            <summary>
            Deserialize body from HttpContent into <typeparamref name="T"/>
            </summary>
            <param name="httpResponse"><see cref="T:System.Net.Http.HttpResponseMessage"/> instance</param>
            <param name="guard"></param>
            <typeparam name="T">Type of the resulting object</typeparam>
            <returns></returns>
            <exception cref="T:Telegram.Bot.Exceptions.RequestException">
            Thrown when body in the response can not be deserialized into <typeparamref name="T"/>
            </exception>
        </member>
        <member name="M:Telegram.Bot.Helpers.Extensions.DeserializeJsonFromStream``1(System.IO.Stream)">
            <summary>
            Deserialized JSON in Stream into <typeparamref name="T"/>
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> with content</param>
            <typeparam name="T">Type of the resulting object</typeparam>
            <returns>Deserialized instance of <typeparamref name="T" /> or <c>null</c></returns>
        </member>
        <member name="T:Telegram.Bot.ITelegramBotClient">
            <summary>
            A client interface to use the Telegram Bot API
            </summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.BotId">
            <summary>
            Unique identifier for the bot from bot token. For example, for the bot token
            "1234567:4TT8bAc8GHUspu3ERYn-KGcvsvGB9u_n4ddy", the bot id is "1234567".
            Token format is not public API so this property is optional and may stop working
            in the future if Telegram changes it's token format.
            </summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.Timeout">
            <summary>
            Timeout for requests
            </summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.ExceptionsParser">
            <summary>
            Instance of <see cref="T:Telegram.Bot.Exceptions.IExceptionParser"/> to parse errors from Bot API into
            <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/>
            </summary>
            <remarks>This property is not thread safe</remarks>
        </member>
        <member name="E:Telegram.Bot.ITelegramBotClient.OnMakingApiRequest">
            <summary>
            Occurs before sending a request to API
            </summary>
        </member>
        <member name="E:Telegram.Bot.ITelegramBotClient.OnApiResponseReceived">
            <summary>
            Occurs after receiving the response to an API request
            </summary>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.MakeRequestAsync``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <summary>
            Send a request to Bot API
            </summary>
            <typeparam name="TResponse">Type of expected result in the response object</typeparam>
            <param name="request">API request object</param>
            <param name="cancellationToken"></param>
            <returns>Result of the API request</returns>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.TestApiAsync(System.Threading.CancellationToken)">
            <summary>
            Test the API token
            </summary>
            <param name="cancellationToken"></param>
            <returns><c>true</c> if token is valid</returns>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.DownloadFileAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Use this method to download a file. Get <paramref name="filePath"/> by calling
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>
            </summary>
            <param name="filePath">Path to file on server</param>
            <param name="destination">Destination stream to write file to</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <exception cref="T:System.ArgumentException">filePath is <c>null</c>, empty or too short</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is <c>null</c></exception>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities">
            <summary>
            List of special entities that appear in the caption, which can be specified instead of
            <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.Entities">
            <summary>
            List of special entities that appear in message text, which can be specified instead of
            <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode">
            <summary>
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see>
            options for more details.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId">
            <summary>
            Identifier of the inline message
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup">
            <summary>
            An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup">
            <summary>
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification">
            <summary>
            Sends the message silently. Users will receive a notification with no sound.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId">
            <summary>
            If the message is a reply, ID of the original message
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply">
            <summary>
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </summary>
        </member>
        <member name="F:Telegram.Bot.Requests.Abstractions.Documentation.Thumb">
            <summary>
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
            server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
            width and height should not exceed 320. Ignored if the file is not uploaded using
            multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so
            you can pass "attach://&lt;file_attach_name&gt;" if the thumbnail was uploaded using
            multipart/form-data under &lt;file_attach_name&gt;
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IChatTargetable">
            <summary>
            Represents a request having <see cref="P:Telegram.Bot.Requests.Abstractions.IChatTargetable.ChatId"/> parameter
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IChatTargetable.ChatId">
            <summary>
            Unique identifier for the target chat or username of the target channel
            (in the format @channelusername)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IRequest`1">
            <summary>
            Represents a request to Bot API
            </summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IRequest`1.Method">
            <summary>
            HTTP method of request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IRequest`1.MethodName">
            <summary>
            API method name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IRequest`1.IsWebhookResponse">
            <summary>
            Allows this object to be used as a response in webhooks
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.Abstractions.IRequest`1.ToHttpContent">
            <summary>
            Generate content of HTTP message
            </summary>
            <returns>Content of HTTP request</returns>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IUserTargetable">
            <summary>
            Represents a request having <see cref="P:Telegram.Bot.Requests.Abstractions.IUserTargetable.UserId"/> parameter
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IUserTargetable.UserId">
            <summary>
            User identifier
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerCallbackQueryRequest">
            <summary>
            Use this method to send answers to callback queries sent from
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboards</see>. The answer will be
            displayed to the user as a notification at the top of the chat screen or as an alert. On success,
            <c>true</c> is returned.
            </summary>
            <remarks>
            Alternatively, the user can be redirected to the specified Game URL.For this option to work, you
            must first create a game for your bot via <c>@Botfather</c> and accept the terms. Otherwise, you
            may use links like <c>t.me/your_bot? start = XXXX</c> that open your bot with a parameter.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.CallbackQueryId">
            <summary>
            Unique identifier for the query to be answered
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.Text">
            <summary>
            Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.ShowAlert">
            <summary>
            If true, an alert will be shown by the client instead of a notification at the top of
            the chat screen. Defaults to <c>false</c>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.Url">
            <summary>
            URL that will be opened by the user's client. If you have created a
            <see href="https://core.telegram.org/bots/api#game">Game</see> and accepted the conditions
            via <c>@Botfather</c>, specify the URL that opens your game — note that this will only work
            if the query comes from a callback_game button.
            <para>
            Otherwise, you may use links like <c>t.me/your_bot? start = XXXX</c> that open your bot with
            a parameter
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.CacheTime">
            <summary>
            The maximum amount of time in seconds that the result of the callback query may be cached
            client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerCallbackQueryRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with callbackQueryId
            </summary>
            <param name="callbackQueryId">Unique identifier for the query to be answered</param>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteMyCommandsRequest">
            <summary>
            Use this method to delete the list of the bot's commands for the given
            <see cref="P:Telegram.Bot.Requests.DeleteMyCommandsRequest.Scope">scope</see> and <see cref="P:Telegram.Bot.Requests.DeleteMyCommandsRequest.LanguageCode">user language</see>.  After deletion,
            <see href="https://core.telegram.org/bots/api#determining-list-of-commands">higher level commands</see>
            will be shown to affected users. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMyCommandsRequest.Scope">
            <summary>
            An object, describing scope of users for which the commands are relevant.
            Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMyCommandsRequest.LanguageCode">
            <summary>
            A two-letter ISO 639-1 language code. If empty, commands will be applied to all users
            from the given <see cref="P:Telegram.Bot.Requests.DeleteMyCommandsRequest.Scope">Scope</see>, for whose language there are no dedicated
            commands
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteMyCommandsRequest.#ctor">
            <summary>
            Initializes a new request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMyCommandsRequest">
            <summary>
            Use this method to get the current list of the bot's commands for the given <see cref="P:Telegram.Bot.Requests.GetMyCommandsRequest.Scope">scope</see>
            and <see cref="P:Telegram.Bot.Requests.GetMyCommandsRequest.LanguageCode">user language</see>. Returns Array of <see cref="T:Telegram.Bot.Types.BotCommand"/> on success.
            If commands aren't set, an empty list is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyCommandsRequest.Scope">
            <summary>
            An object, describing scope of users. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyCommandsRequest.LanguageCode">
            <summary>
            A two-letter ISO 639-1 language code or an empty string
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMyCommandsRequest.#ctor">
            <summary>
            Initializes a new request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetMyCommandsRequest">
            <summary>
            Use this method to change the list of the bot's commands. See
            <see href="https://core.telegram.org/bots#commands"/> for more details about bot commands.
            Returns <c>true</c> on success
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyCommandsRequest.Commands">
            <summary>
            A list of bot commands to be set as the list of the bot's commands.
            At most 100 commands can be specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyCommandsRequest.Scope">
            <summary>
            An object, describing scope of users for which the commands are relevant.
            Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyCommandsRequest.LanguageCode">
            <summary>
            A two-letter ISO 639-1 language code. If empty, commands will be applied to all users
            from the given <see cref="P:Telegram.Bot.Requests.SetMyCommandsRequest.Scope"/>, for whose language there are no dedicated commands
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetMyCommandsRequest.#ctor(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.BotCommand})">
            <summary>
            Initializes a new request with commands
            </summary>
            <param name="commands">A list of bot commands to be set</param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetFileRequest">
            <summary>
            Use this method to get basic info about a file and prepare it for downloading. For the moment,
            bots can download files of up to 20MB in size. On success, a <see cref="T:Telegram.Bot.Types.File"/> object is
            returned. The file can then be downloaded via the link
            <c>https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;</c>, where
            <c>&lt;file_path&gt;</c> is taken from the response. It is guaranteed that the link will be valid
            for at least 1 hour. When the link expires, a new one can be requested by calling
            <see cref="T:Telegram.Bot.Requests.GetFileRequest"/> again.
            </summary>
            <remarks>
            You can use <see cref="M:Telegram.Bot.ITelegramBotClient.DownloadFileAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)"/> or
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetInfoAndDownloadFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.IO.Stream,System.Threading.CancellationToken)"/> methods to download the file
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetFileRequest.FileId">
            <summary>
            File identifier to get info about
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetFileRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with <see cref="P:Telegram.Bot.Requests.GetFileRequest.FileId"/>
            </summary>
            <param name="fileId">File identifier to get info about</param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetUserProfilePhotosRequest">
            <summary>
            Use this method to get a list of profile pictures for a user. Returns a
            <see cref="T:Telegram.Bot.Types.UserProfilePhotos"/> object.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserProfilePhotosRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserProfilePhotosRequest.Offset">
            <summary>
            Sequential number of the first photo to be returned. By default, all photos are returned
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserProfilePhotosRequest.Limit">
            <summary>
            Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetUserProfilePhotosRequest.#ctor(System.Int64)">
            <summary>
            Initializes a new request with userId
            </summary>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMeRequest">
            <summary>
            A simple method for testing your bot's auth token. Requires no parameters. Returns basic information
            about the bot in form of a <see cref="T:Telegram.Bot.Types.User"/> object.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMeRequest.#ctor">
            <summary>
            Initializes a new request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CloseRequest">
            <summary>
            Use this method to close the bot instance before moving it from one local server to another.
            You need to delete the webhook before calling this method to ensure that the bot isn't launched
            again after server restart. The method will return error 429 in the first 10 minutes after the
            bot is launched. Returns True on success. Requires no parameters.
            </summary>
            <see href="https://core.telegram.org/bots/api#close"/>
        </member>
        <member name="M:Telegram.Bot.Requests.CloseRequest.#ctor">
            <summary>
            Initializes a new request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.LogOutRequest">
            <summary>
            Use this method to log out from the cloud Bot API server before launching the bot locally.
            You <b>must</b> log out the bot before running it locally, otherwise there is no guarantee
            that the bot will receive updates. After a successful call, you can immediately log in on
            a local server, but will not be able to log in back to the cloud Bot API server for 10
            minutes. Returns <c>true</c> on success. Requires no parameters.
            </summary>
            <see href="https://core.telegram.org/bots/api#logout"/>
        </member>
        <member name="M:Telegram.Bot.Requests.LogOutRequest.#ctor">
            <summary>
            Initializes a new request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.BanChatMemberRequest">
            <summary>
            Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups
            and channels, the user will not be able to return to the chat on their own using invite links,
            etc., unless <see cref="T:Telegram.Bot.Requests.UnbanChatMemberRequest">unbanned</see> first. The bot must be an
            administrator in the chat for this to work and must have the appropriate admin rights.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.UntilDate">
            <summary>
            Date when the user will be unbanned. If user is banned for more than 366 days or less
            than 30 seconds from the current time they are considered to be banned forever.
            Applied for supergroups and channels only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.RevokeMessages">
            <summary>
            Pass True to delete all messages from the chat for the user that is being removed. If
            <c>false</c>, the user will be able to see messages in the group that were sent before
            the user was removed. Always True for supergroups and channels.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.BanChatMemberRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Initializes a new request with chatId and userId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.ApproveChatJoinRequest">
            <summary>
            Use this request to approve a chat join request. The bot must be an administrator in the chat for this to
            work and must have the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ApproveChatJoinRequest.ChatId">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Requests.ApproveChatJoinRequest.UserId">
            <summary>
            Unique identifier of the target user
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.ApproveChatJoinRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Initializes a new request with chatId and userId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.CreateChatInviteLinkRequest">
            <summary>
            Use this method to create an additional invite link for a chat. The bot must be an
            administrator in the chat for this to work and must have the appropriate admin rights.
            The link can be revoked using the method <see cref="T:Telegram.Bot.Requests.RevokeChatInviteLinkRequest"/>.
            Returns the new invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.Name">
            <summary>
            Invite link name; 0-32 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.ExpireDate">
            <summary>
            Point in time when the link will expire
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.MemberLimit">
            <summary>
            Maximum number of users that can be members of the chat simultaneously after joining the
            chat via this invite link; 1-99999
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.CreatesJoinRequest">
            <summary>
            Set to <c>true</c>, if users joining the chat via the link need to be approved by chat administrators.
            If <c>true</c>, <see cref="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.MemberLimit"/> can't be specified
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateChatInviteLinkRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.DeclineChatJoinRequest">
            <summary>
            Use this request to decline a chat join request. The bot must be an administrator in the chat for this to
            work and must have the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeclineChatJoinRequest.ChatId">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Requests.DeclineChatJoinRequest.UserId">
            <summary>
            Unique identifier of the target user
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeclineChatJoinRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Initializes a new request with chatId and userId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditChatInviteLinkRequest">
            <summary>
            Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator
            in the chat for this to work and must have the appropriate admin rights. Returns the edited invite
            link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.InviteLink">
            <summary>
            The invite link to edit
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.Name">
            <summary>
            Invite link name; 0-32 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.ExpireDate">
            <summary>
            Point in time when the link will expire
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.MemberLimit">
            <summary>
            Maximum number of users that can be members of the chat simultaneously after joining the
            chat via this invite link; 1-99999
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.CreatesJoinRequest">
            <summary>
            Set to <c>true</c>, if users joining the chat via the link need to be approved by chat administrators.
            If <c>true</c>, <see cref="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.MemberLimit"/> can't be specified
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditChatInviteLinkRequest.#ctor(Telegram.Bot.Types.ChatId,System.String)">
            <summary>
            Initializes a new request with chatId and inviteLink
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="inviteLink">The invite link to edit</param>
        </member>
        <member name="T:Telegram.Bot.Requests.ExportChatInviteLinkRequest">
            <summary>
            Use this method to generate a new primary invite link for a chat; any previously generated primary
            link is revoked. The bot must be an administrator in the chat for this to work and must have the
            appropriate admin rights. Returns the new invite link as <c>string</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ExportChatInviteLinkRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.ExportChatInviteLinkRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.RevokeChatInviteLinkRequest">
            <summary>
            Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new
            link is automatically generated. The bot must be an administrator in the chat for this to work and
            must have the appropriate admin rights. Returns the revoked invite link as
            <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RevokeChatInviteLinkRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.RevokeChatInviteLinkRequest.InviteLink">
            <summary>
            The invite link to revoke
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.RevokeChatInviteLinkRequest.#ctor(Telegram.Bot.Types.ChatId,System.String)">
            <summary>
            Initializes a new request with chatId and inviteLink
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="inviteLink">The invite link to revoke</param>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteChatPhotoRequest">
            <summary>
            Use this method to delete a chat photo. Photos can't be changed for private chats. The bot
            must be an administrator in the chat for this to work and must have the appropriate
            admin rights. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteChatPhotoRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteChatPhotoRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteChatStickerSetRequest">
            <summary>
            Use this method to delete a group sticker set from a supergroup. The bot must be an administrator
            in the chat for this to work and must have the appropriate admin rights. Use the field
            <see cref="P:Telegram.Bot.Types.Chat.CanSetStickerSet"/> optionally returned in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>
            requests to check if the bot can use this method. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteChatStickerSetRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteChatStickerSetRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatAdministratorsRequest">
            <summary>
            Use this method to get a list of administrators in a chat. On success, returns an Array of
            <see cref="T:Telegram.Bot.Types.ChatMember"/> objects that contains information about all chat administrators
            except other bots. If the chat is a group or a supergroup and no administrators were appointed,
            only the creator will be returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatAdministratorsRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatAdministratorsRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatMemberCountRequest">
            <summary>
            Use this method to get the number of members in a chat. Returns <c>int</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMemberCountRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatMemberCountRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatMemberRequest">
            <summary>
            Use this method to get information about a member of a chat. Returns a <see cref="T:Telegram.Bot.Types.ChatMember"/>
            object on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMemberRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMemberRequest.UserId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatMemberRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Initializes a new request with chatId and userId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatMembersCountRequest">
            <summary>
            Use this method to get the number of members in a chat. Returns <c>int</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMembersCountRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatMembersCountRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatRequest">
            <summary>
            Use this method to get up to date information about the chat (current name of the user for
            one-on-one conversations, current username of a user, group or channel, etc.).
            Returns a <see cref="T:Telegram.Bot.Types.Chat"/> object on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.KickChatMemberRequest">
            <summary>
            Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and
            channels, the user will not be able to return to the chat on their own using invite links, etc.,
            unless <see cref="T:Telegram.Bot.Requests.UnbanChatMemberRequest">unbanned</see> first. The bot must be an administrator
            in the chat for this to work and must have the appropriate admin rights. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.KickChatMemberRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.KickChatMemberRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.KickChatMemberRequest.UntilDate">
            <summary>
            Date when the user will be unbanned. If user is banned for more than 366 days or less than
            30 seconds from the current time they are considered to be banned forever. Applied for
            supergroups and channels only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.KickChatMemberRequest.RevokeMessages">
            <summary>
            Pass True to delete all messages from the chat for the user that is being removed. If
            <c>false</c>, the user will be able to see messages in the group that were sent before
            the user was removed. Always True for supergroups and channels.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.KickChatMemberRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Initializes a new request with chatId and userId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.LeaveChatRequest">
            <summary>
            Use this method for your bot to leave a group, supergroup or channel. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.LeaveChatRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.LeaveChatRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.PinChatMessageRequest">
            <summary>
            Use this method to add a message to the list of pinned messages in a chat. If the chat is not a
            private chat, the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatPermissions.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PinChatMessageRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.PinChatMessageRequest.MessageId">
            <summary>
            Identifier of a message to pin
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PinChatMessageRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="M:Telegram.Bot.Requests.PinChatMessageRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId and messageId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of a message to pin</param>
        </member>
        <member name="T:Telegram.Bot.Requests.PromoteChatMemberRequest">
            <summary>
            Use this method to promote or demote a user in a supergroup or a channel. The bot must be
            an administrator in the chat for this to work and must have the appropriate admin rights.
            Pass <c>false</c> for all boolean parameters to demote a user. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.IsAnonymous">
            <summary>
            Pass True, if the administrator's presence in the chat is hidden
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanManageChat">
            <summary>
            Pass True, if the administrator can access the chat event log, chat statistics, message
            statistics in channels, see channel members, see anonymous administrators in supergroups
            and ignore slow mode. Implied by any other administrator privilege
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanPostMessages">
            <summary>
            Pass True, if the administrator can create channel posts, channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanEditMessages">
            <summary>
            Pass True, if the administrator can edit messages of other users and can pin messages,
            channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanDeleteMessages">
            <summary>
            Pass True, if the administrator can delete messages of other users
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanManageVoiceChat">
            <summary>
            Pass True, if the administrator can manage voice chats
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanRestrictMembers">
            <summary>
            Pass True, if the administrator can restrict, ban or unban chat members
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanPromoteMembers">
            <summary>
            Pass True, if the administrator can add new administrators with a subset of their own
            privileges or demote administrators that he has promoted, directly or indirectly
            (promoted by administrators that were appointed by him)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanChangeInfo">
            <summary>
            Pass True, if the administrator can change chat title, photo and other settings
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanInviteUsers">
            <summary>
            Pass True, if the administrator can invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanPinMessages">
            <summary>
            Pass True, if the administrator can pin messages, supergroups only
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.PromoteChatMemberRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Initializes a new request with chatId and userId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.RestrictChatMemberRequest">
            <summary>
            Use this method to restrict a user in a supergroup. The bot must be an administrator in the
            supergroup for this to work and must have the appropriate admin rights. Pass <c>true</c>
            for all permissions to lift restrictions from a user. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.Permissions">
            <summary>
            New user permissions
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.UntilDate">
            <summary>
            Date when restrictions will be lifted for the user, unix time. If user is restricted for
            more than 366 days or less than 30 seconds from the current time, they are considered to
            be restricted forever.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.RestrictChatMemberRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatPermissions)">
            <summary>
            Initializes a new request with chatId, userId and new user permissions
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="permissions">New user permissions</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest">
            <summary>
            Use this method to set a custom title for an administrator in a supergroup promoted by the bot.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.CustomTitle">
            <summary>
            New custom title for the administrator; 0-16 characters, emoji are not allowed
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64,System.String)">
            <summary>
            Initializes a new request with chatId, userId and customTitle
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="customTitle">
            New custom title for the administrator; 0-16 characters, emoji are not allowed
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatDescriptionRequest">
            <summary>
            Use this method to change the description of a group, a supergroup or a channel.
            The bot must be an administrator in the chat for this to work and must have the
            appropriate admin rights. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatDescriptionRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatDescriptionRequest.Description">
            <summary>
            New chat Description, 0-255 characters
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatDescriptionRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatPermissionsRequest">
            <summary>
            Use this method to set default chat permissions for all members. The bot must be an administrator
            in the group or a supergroup for this to work and must have the can_restrict_members admin rights.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPermissionsRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPermissionsRequest.Permissions">
            <summary>
            New default chat permissions
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatPermissionsRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatPermissions)">
            <summary>
            Initializes a new request with chatId and new default permissions
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="permissions">New default chat permissions</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatPhotoRequest">
            <summary>
            Use this method to set a new profile photo for the chat. Photos can't be changed for private
            chats. The bot must be an administrator in the chat for this to work and must have the appropriate
            admin rights. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPhotoRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPhotoRequest.Photo">
            <summary>
            New chat photo, uploaded using multipart/form-data
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatPhotoRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputFileStream)">
            <summary>
            Initializes a new request with chatId and photo
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="photo">New chat photo, uploaded using multipart/form-data</param>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatPhotoRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatStickerSetRequest">
            <summary>
            Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in
            the chat for this to work and must have the appropriate admin rights. Use the field
            <see cref="P:Telegram.Bot.Types.Chat.CanSetStickerSet"/> optionally returned in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/> requests to
            check if the bot can use this method. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatStickerSetRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatStickerSetRequest.StickerSetName">
            <summary>
            Name of the sticker set to be set as the group sticker set
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatStickerSetRequest.#ctor(Telegram.Bot.Types.ChatId,System.String)">
            <summary>
            Initializes a new request with chatId and new stickerSetName
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="stickerSetName">Name of the sticker set to be set as the group sticker set</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatTitleRequest">
            <summary>
            Use this method to change the title of a chat. Titles can't be changed for private chats.
            The bot must be an administrator in the chat for this to work and must have the appropriate
            admin rights. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatTitleRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatTitleRequest.Title">
            <summary>
            New chat title, 1-255 characters
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatTitleRequest.#ctor(Telegram.Bot.Types.ChatId,System.String)">
            <summary>
            Initializes a new request with chatId and title
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="title">New chat title, 1-255 characters</param>
        </member>
        <member name="T:Telegram.Bot.Requests.UnbanChatMemberRequest">
            <summary>
            Use this method to unban a previously banned user in a supergroup or channel. The user will
            <b>not</b> return to the group or channel automatically, but will be able to join via link,
            etc. The bot must be an administrator for this to work. By default, this method guarantees
            that after the call the user is not a member of the chat, but will be able to join it.
            So if the user is a member of the chat they will also be <b>removed</b> from the chat.
            If you don't want this, use the parameter <see cref="P:Telegram.Bot.Requests.UnbanChatMemberRequest.OnlyIfBanned"/>. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatMemberRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatMemberRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatMemberRequest.OnlyIfBanned">
            <summary>
            Do nothing if the user is not banned
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnbanChatMemberRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Initializes a new request with chatId and userId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Requests.UnpinAllChatMessagesRequest">
            <summary>
            Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat,
            the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinAllChatMessagesRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.UnpinAllChatMessagesRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.UnpinChatMessageRequest">
            <summary>
            Use this method to remove a message from the list of pinned messages in a chat. If the chat is not
            a private chat, the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinChatMessageRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinChatMessageRequest.MessageId">
            <summary>
            Identifier of a message to unpin. If not specified, the most recent pinned message
            (by sending date) will be unpinned.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnpinChatMessageRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.CopyMessageRequest">
            <summary>
            Use this method to copy messages of any kind. Service messages and invoice messages can't be copied.
            The method is analogous to the method <see cref="T:Telegram.Bot.Requests.ForwardMessageRequest"/>, but the copied message
            doesn't have a link to the original message. Returns the <see cref="T:Telegram.Bot.Types.MessageId"/> of the
            sent <see cref="T:Telegram.Bot.Types.Message"/> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ChatId">
            <summary>
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.FromChatId">
            <summary>
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.MessageId">
            <summary>
            Message identifier in the chat specified in <see cref="P:Telegram.Bot.Requests.CopyMessageRequest.FromChatId"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.Caption">
            <summary>
            New caption for media, 0-1024 characters after entities parsing.
            If not specified, the original caption is kept
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.CopyMessageRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId, fromChatId and messageId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">
            Message identifier in the chat specified in <see cref="P:Telegram.Bot.Requests.CopyMessageRequest.FromChatId"/>
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.ForwardMessageRequest">
            <summary>
            Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.ChatId">
            <summary>
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.FromChatId">
            <summary>
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.MessageId">
            <summary>
            Message identifier in the chat specified in <see cref="P:Telegram.Bot.Requests.ForwardMessageRequest.FromChatId"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="M:Telegram.Bot.Requests.ForwardMessageRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId, fromChatId and messageId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">
            Message identifier in the chat specified in <see cref="P:Telegram.Bot.Requests.ForwardMessageRequest.FromChatId"/>
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest">
            <summary>
            Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="T:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest"/>. On success True is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.Latitude">
            <summary>
            Latitude of new location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.Longitude">
            <summary>
            Longitude of new location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.HorizontalAccuracy">
            <summary>
            The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.Heading">
            <summary>
            Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.ProximityAlertRadius">
            <summary>
            Maximum distance for proximity alerts about approaching another chat member, in meters. Must be
            between 1 and 100000 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new request with inlineMessageId, latitude and longitude
            </summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageLiveLocationRequest">
            <summary>
            Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="T:Telegram.Bot.Requests.StopMessageLiveLocationRequest"/>. On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.MessageId">
            <summary>
            Identifier of the message to edit
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.Latitude">
            <summary>
            Latitude of new location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.Longitude">
            <summary>
            Longitude of new location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.HorizontalAccuracy">
            <summary>
            The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.Heading">
            <summary>
            Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.ProximityAlertRadius">
            <summary>
            Maximum distance for proximity alerts about approaching another chat member, in meters.
            Must be between 1 and 100000 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageLiveLocationRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new request with chatId, messageId, latitude and longitude
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendLocationRequest">
            <summary>
            Use this method to send point on the map. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.Latitude">
            <summary>
            Latitude of the location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.Longitude">
            <summary>
            Longitude of the location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.LivePeriod">
            <summary>
            Period in seconds for which the location will be updated, should be between 60 and 86400
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.Heading">
            <summary>
            For live locations, a direction in which the user is moving, in degrees.
            Must be between 1 and 360 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ProximityAlertRadius">
            <summary>
            For live locations, a maximum distance for proximity alerts about approaching another
            chat member, in meters. Must be between 1 and 100000 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.DisableNotification">
            <summary>
            Sends the message silently. Users will receive a notification with no sound.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ReplyToMessageId">
            <summary>
            If the message is a reply, ID of the original message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.AllowSendingWithoutReply">
            <summary>
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendLocationRequest.#ctor(Telegram.Bot.Types.ChatId,System.Double,System.Double)">
            <summary>
            Initializes a new request with chatId, latitude and longitude
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="latitude">Latitude of the location</param>
            <param name="longitude">Longitude of the location</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendVenueRequest">
            <summary>
            Use this method to send information about a venue. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Latitude">
            <summary>
            Latitude of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Longitude">
            <summary>
            Longitude of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Title">
            <summary>
            Name of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.FoursquareId">
            <summary>
            Foursquare identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.FoursquareType">
            <summary>
            Foursquare type of the venue, if known. (For example, “arts_entertainment/default”,
            “arts_entertainment/aquarium” or “food/icecream”.)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.GooglePlaceId">
            <summary>
            Google Places identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.GooglePlaceType">
            <summary>
            Google Places type of the venue.
            (See <see href="https://developers.google.com/places/web-service/supported_types">supported types</see>.)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVenueRequest.#ctor(Telegram.Bot.Types.ChatId,System.Double,System.Double,System.String,System.String)">
            <summary>
            Initializes a new request with chatId, location, venue title and address
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="latitude">Latitude of the venue</param>
            <param name="longitude">Longitude of the venue</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
        </member>
        <member name="T:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest">
            <summary>
            Use this method to stop updating a live location message before <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires. On success True is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with inlineMessageId
            </summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.StopMessageLiveLocationRequest">
            <summary>
            Use this method to stop updating a live location message before
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires. On success the sent
            <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopMessageLiveLocationRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.StopMessageLiveLocationRequest.MessageId">
            <summary>
            Identifier of the sent message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopMessageLiveLocationRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.StopMessageLiveLocationRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId and messageId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the sent message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendAnimationRequest">
            <summary>
            Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success,
            the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned. Bots can currently send animation files of up to
            50 MB in size, this limit may be changed in the future.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Animation">
            <summary>
            Animation to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send an animation
            that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram
            to get an animation from the Internet, or upload a new animation using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Duration">
            <summary>
            Duration of sent animation in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Width">
            <summary>
            Animation width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Height">
            <summary>
            Animation height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Thumb">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Thumb"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Caption">
            <summary>
            Animation caption (may also be used when resending animation by
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/>), 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendAnimationRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile)">
            <summary>
            Initializes a new request with chatId and animation
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="animation">
            Animation to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send an animation
            that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to
            get an animation from the Internet, or upload a new animation using multipart/form-data
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendAnimationRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SendAudioRequest">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display them in the music
            player. Your audio must be in the .MP3 or .M4A format. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/>
            is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be
            changed in the future.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Audio">
            <summary>
            Audio file to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send an audio
            file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for
            Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Caption">
            <summary>
            Audio caption, 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Duration">
            <summary>
            Duration of the audio in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Performer">
            <summary>
            Performer
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Title">
            <summary>
            Track name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Thumb">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Thumb"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendAudioRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile)">
            <summary>
            Initializes a new request with chatId and audio
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="audio">
            Audio file to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send an audio
            file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for
            Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendAudioRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SendChatActionRequest">
            <summary>
            Use this request when you need to tell the user that something is happening on the bot's side.
            The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients
            clear its typing status). Returns <c>true</c> on success.
            </summary>
            <remarks>
            Example: The <see href="https://t.me/imagebot">ImageBot</see> needs some time to process a request
            and upload the image. Instead of sending a text message along the lines of “Retrieving image,
            please wait…”, the bot may use <see cref="T:Telegram.Bot.Requests.SendChatActionRequest"/> with
            <see cref="P:Telegram.Bot.Requests.SendChatActionRequest.Action"/> = <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/>. The user will see a “sending photo”
            status for the bot.
            <para>
            We only recommend using this method when a response from the bot will take a <b>noticeable</b>
            amount of time to arrive.
            </para>
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SendChatActionRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendChatActionRequest.Action">
            <summary>
            Type of action to broadcast. Choose one, depending on what the user is about to receive:
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.Typing"/> for <see cref="T:Telegram.Bot.Requests.SendMessageRequest">text messages</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/> for <see cref="T:Telegram.Bot.Requests.SendPhotoRequest">photos</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideo"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideo"/> for
            <see cref="T:Telegram.Bot.Requests.SendVideoRequest">videos</see>, <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVoice"/> or
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVoice"/> for <see cref="T:Telegram.Bot.Requests.SendVoiceRequest">voice notes</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadDocument"/> for <see cref="T:Telegram.Bot.Requests.SendDocumentRequest">general files</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.FindLocation"/> for <see cref="T:Telegram.Bot.Requests.SendLocationRequest">location data</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideoNote"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideoNote"/> for
            <see cref="T:Telegram.Bot.Requests.SendVideoNoteRequest">video notes</see>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendChatActionRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction)">
            <summary>
            Initializes a new request chatId and action
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="action">
            Type of action to broadcast. Choose one, depending on what the user is about to receive
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendContactRequest">
            <summary>
            Use this method to send phone contacts. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.LastName">
            <summary>
            Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.Vcard">
            <summary>
            Additional data about the contact in the form of a vCard, 0-2048 bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendContactRequest.#ctor(Telegram.Bot.Types.ChatId,System.String,System.String)">
            <summary>
            Initializes a new request with chatId, phoneNumber and firstName
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendDiceRequest">
            <summary>
            Use this method to send an animated emoji that will display a random value. On success,
            the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.Emoji">
            <summary>
            Emoji on which the dice throw animation is based. Defaults to <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendDiceRequest.#ctor(Telegram.Bot.Types.ChatId)">
            <summary>
            Initializes a new request with chatId
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendDocumentRequest">
            <summary>
            Use this method to send general files. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/>
            is returned. Bots can currently send files of any type of up to 50 MB in size,
            this limit may be changed in the future.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.Document">
            <summary>
            File to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram
            to get a file from the Internet, or upload a new one using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.Thumb">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Thumb"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.Caption">
            <summary>
            Document caption (may also be used when resending documents by file_id), 0-1024 characters
            after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.DisableContentTypeDetection">
            <summary>
            Disables automatic server-side content type detection for files uploaded using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendDocumentRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile)">
            <summary>
            Initializes a new request with chatId and document
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="document">
            File to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as string to send a file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram
            to get a file from the Internet, or upload a new one using multipart/form-data
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendDocumentRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SendMediaGroupRequest">
            <summary>
            Use this method to send a group of photos, videos, documents or audios as an album. Documents and
            audio files can be only grouped in an album with messages of the same type. On success, an array
            of <see cref="T:Telegram.Bot.Types.Message"/>s that were sent is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.Media">
            <summary>
            An array describing messages to be sent, must include 2-10 items
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendMediaGroupRequest.#ctor(Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.IAlbumInputMedia})">
            <summary>
            Initializes a request with chatId and media
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="media">An array describing messages to be sent, must include 2-10 items</param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendMediaGroupRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SendMessageRequest">
            <summary>
            Use this method to send text messages. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.Text">
            <summary>
            Text of the message to be sent, 1-4096 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.Entities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Entities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.DisableWebPagePreview">
            <summary>
            Disables link previews for links in this message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendMessageRequest.#ctor(Telegram.Bot.Types.ChatId,System.String)">
            <summary>
            Initializes a new request with chatId and text
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="text">Text of the message to be sent, 1-4096 characters after entities parsing</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendPhotoRequest">
            <summary>
            Use this method to send photos. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.Photo">
            <summary>
            Photo to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a photo that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to
            get a photo from the Internet, or upload a new photo using multipart/form-data. The photo
            must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total.
            Width and height ratio must be at most 20
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.Caption">
            <summary>
            Photo caption (may also be used when resending photos by <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/>),
            0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendPhotoRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile)">
            <summary>
            Initializes a new request with chatId and photo
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="photo">
            Photo to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a photo that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to
            get a photo from the Internet, or upload a new photo using multipart/form-data. The photo
            must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total.
            Width and height ratio must be at most 20</param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendPhotoRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SendPollRequest">
            <summary>
            Use this method to send a native poll. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Question">
            <summary>
            Poll question, 1-300 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Options">
            <summary>
            A list of answer options, 2-10 strings 1-100 characters each
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.IsAnonymous">
            <summary>
            True, if the poll needs to be anonymous, defaults to True
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Type">
            <summary>
            Poll type, defaults to <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.AllowsMultipleAnswers">
            <summary>
            True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.CorrectOptionId">
            <summary>
            0-based identifier of the correct answer option, required for polls in quiz mode
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Explanation">
            <summary>
            Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
            quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ExplanationParseMode">
            <summary>
            Mode for parsing entities in the explanation. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting options</see>
            for more details.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ExplanationEntities">
            <summary>
            List of special entities that appear in the poll explanation, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.OpenPeriod">
            <summary>
            Amount of time in seconds the poll will be active after creation, 5-600. Can't be used
            together with <see cref="P:Telegram.Bot.Requests.SendPollRequest.CloseDate"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.CloseDate">
            <summary>
            Point in time when the poll will be automatically closed. Must be at least 5 and no more
            than 600 seconds in the future. Can't be used together with <see cref="P:Telegram.Bot.Requests.SendPollRequest.OpenPeriod"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.IsClosed">
            <summary>
            Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendPollRequest.#ctor(Telegram.Bot.Types.ChatId,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new request with chatId, question and <see cref="T:Telegram.Bot.Types.PollOption"/>
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="question">Poll question, 1-300 characters</param>
            <param name="options">A list of answer options, 2-10 strings 1-100 characters each</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendVideoNoteRequest">
            <summary>
            As of <see href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</see>,
            Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method
            to send video messages. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.VideoNote">
            <summary>
            Video note to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a video
            note that exists on the Telegram servers (recommended) or upload a new video using
            multipart/form-data. Sending video notes by a URL is currently unsupported
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.Duration">
            <summary>
            Duration of sent video in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.Length">
            <summary>
            Video width and height, i.e. diameter of the video message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.Thumb">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Thumb"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVideoNoteRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputTelegramFile)">
            <summary>
            Initializes a new request with chatId and videoNote
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="videoNote">
            Video note to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a video
            note that exists on the Telegram servers (recommended) or upload a new video using
            multipart/form-data. Sending video notes by a URL is currently unsupported
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVideoNoteRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SendVideoRequest">
            <summary>
            Use this method to send video files, Telegram clients support mp4 videos (other formats may be
            sent as <see cref="T:Telegram.Bot.Types.Document"/>). On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Video">
            <summary>
            Video to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a video that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to
            get a video from the Internet, or upload a new video using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Duration">
            <summary>
            Duration of sent video in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Width">
            <summary>
            Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Height">
            <summary>
            Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Thumb">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Thumb"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Caption">
            <summary>
            Video caption (may also be used when resending videos by file_id),
            0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.SupportsStreaming">
            <summary>
            Pass True, if the uploaded video is suitable for streaming
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVideoRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile)">
            <summary>
            Initializes a new request with chatId and video
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="video">
            Video to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a video that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to
            get a video from the Internet, or upload a new video using multipart/form-data
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVideoRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SendVoiceRequest">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable
            voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other
            formats may be sent as <see cref="T:Telegram.Bot.Types.Audio"/> or <see cref="T:Telegram.Bot.Types.Document"/>). On success, the sent
            <see cref="T:Telegram.Bot.Types.Message"/> is returned. Bots can currently send voice messages of up to 50 MB in size,
            this limit may be changed in the future.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.Voice">
            <summary>
            Audio file to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get
            a file from the Internet, or upload a new one using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.Caption">
            <summary>
            Voice message caption, 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.Duration">
            <summary>
            Duration of the voice message in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVoiceRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile)">
            <summary>
            Initializes a new request with chatId and voice
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="voice">
            Audio file to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a file
            that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram
            to get a file from the Internet, or upload a new one using multipart/form-data
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVoiceRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.FileRequestBase`1">
            <summary>
            Represents an API request with a file
            </summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
        </member>
        <member name="M:Telegram.Bot.Requests.FileRequestBase`1.#ctor(System.String)">
            <summary>
            Initializes an instance of request
            </summary>
            <param name="methodName">Bot API method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.FileRequestBase`1.#ctor(System.String,System.Net.Http.HttpMethod)">
            <summary>
            Initializes an instance of request
            </summary>
            <param name="methodName">Bot API method</param>
            <param name="method">HTTP method to use</param>
        </member>
        <member name="M:Telegram.Bot.Requests.FileRequestBase`1.ToMultipartFormDataContent(System.String,Telegram.Bot.Types.InputFiles.InputFileStream)">
            <summary>
            Generate multipart form data content
            </summary>
            <param name="fileParameterName"></param>
            <param name="inputFile"></param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Requests.FileRequestBase`1.GenerateMultipartFormDataContent(System.String[])">
            <summary>
            Generate multipart form data content
            </summary>
            <param name="exceptPropertyNames"></param>
            <returns></returns>
        </member>
        <member name="T:Telegram.Bot.Requests.GetGameHighScoresRequest">
            <summary>
            Use this method to get data for high score tables. Will return the score of the specified user
            and several of their neighbors in a game. On success, returns an Array of
            <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.
            </summary>
            <remarks>
            This method will currently return scores for the target user, plus two of their closest neighbors
            on each side. Will also return the top three users if the user and his neighbors are not among
            them. Please note that this behavior is subject to change.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.ChatId">
            <summary>
            Unique identifier for the target chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.Telegram#Bot#Requests#Abstractions#IChatTargetable#ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.MessageId">
            <summary>
            Identifier of the sent message
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetGameHighScoresRequest.#ctor(System.Int64,System.Int64,System.Int32)">
            <summary>
            Initializes a new request with userId, chatId and messageId
            </summary>
            <param name="userId">Target user id</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetInlineGameHighScoresRequest">
            <summary>
            Use this method to get data for high score tables. Will return the score of the specified user
            and several of their neighbors in a game. On success, returns an Array of
            <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.
            </summary>
            <remarks>
            This method will currently return scores for the target user, plus two of their closest neighbors
            on each side. Will also return the top three users if the user and his neighbors are not among them.
            Please note that this behavior is subject to change.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetInlineGameHighScoresRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.GetInlineGameHighScoresRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="M:Telegram.Bot.Requests.GetInlineGameHighScoresRequest.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new request with userId and inlineMessageId
            </summary>
            <param name="userId">User identifier</param>
            <param name="inlineMessageId">Identifier of the inline message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendGameRequest">
            <summary>
            Use this method to send a game. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.ChatId">
            <summary>
            Unique identifier for the target chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.Telegram#Bot#Requests#Abstractions#IChatTargetable#ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.GameShortName">
            <summary>
            Short name of the game, serves as the unique identifier for the game. Set up your games
            via <see href="https://t.me/botfather">@Botfather</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendGameRequest.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new request with chatId and gameShortName
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="gameShortName">
            Short name of the game, serves as the unique identifier for the game. Set up your games via
            <see href="https://t.me/botfather">@Botfather</see>
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetGameScoreRequest">
            <summary>
            Use this method to set the score of the specified user in a game. On success returns the edited
            <see cref="T:Telegram.Bot.Types.Message"/>. Returns an error, if the new score is not greater than the user's current
            score in the chat and <see cref="P:Telegram.Bot.Requests.SetGameScoreRequest.Force"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.Score">
            <summary>
            New score, must be non-negative
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.Force">
            <summary>
            Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.DisableEditMessage">
            <summary>
            Pass <c>true</c>, if the game message should not be automatically edited to include
            the current scoreboard
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.ChatId">
            <summary>
            Unique identifier for the target chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.Telegram#Bot#Requests#Abstractions#IChatTargetable#ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.MessageId">
            <summary>
            Identifier of the sent message
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetGameScoreRequest.#ctor(System.Int64,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new request
            </summary>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetInlineGameScoreRequest">
            <summary>
            Use this method to set the score of the specified user in a game. On success returns <c>true</c>.
            Returns an error, if the new score is not greater than the user's current score in the chat and
            <see cref="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.Force"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.Score">
            <summary>
            New score, must be non-negative
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.Force">
            <summary>
            Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.DisableEditMessage">
            <summary>
            Pass True, if the game message should not be automatically edited to include the current scoreboard
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SetInlineGameScoreRequest.#ctor(System.Int64,System.Int32,System.String)">
            <summary>
            Initializes a new request with userId, inlineMessageId and new score
            </summary>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="inlineMessageId">Identifier of the inline message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteWebhookRequest">
            <summary>
            Use this method to remove webhook integration if you decide to switch back to
            <see cref="T:Telegram.Bot.Requests.GetUpdatesRequest"/>. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteWebhookRequest.DropPendingUpdates">
            <summary>
            Pass True to drop all pending updates
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteWebhookRequest.#ctor">
            <summary>
            Initializes a new request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetUpdatesRequest">
            <summary>
            Use this method to receive incoming updates using long polling
            (<see href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</see>).
            An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects is returned.
            </summary>
            <remarks>
            <list type="number">
            <item>This method will not work if an outgoing webhook is set up.</item>
            <item>
            In order to avoid getting duplicate updates, recalculate <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset"/>
            after each server response.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">
            <summary>
            Identifier of the first update to be returned. Must be greater by one than the highest among
            the identifiers of previously received updates. By default, updates starting with the earliest
            unconfirmed update are returned. An update is considered confirmed as soon as
            <see cref="T:Telegram.Bot.Requests.GetUpdatesRequest"/> is called with an <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset"/> higher than its
            <see cref="P:Telegram.Bot.Types.Update.Id"/>. The negative offset can be specified to retrieve updates
            starting from <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">-offset</see> update from the end of the updates queue.
            All previous updates will forgotten.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Limit">
            <summary>
            Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Timeout">
            <summary>
            Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive,
            short polling should be used for testing purposes only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.AllowedUpdates">
            <summary>
            A list of the update types you want your bot to receive. For example, specify
            [<see cref="F:Telegram.Bot.Types.Enums.UpdateType.Message"/>, <see cref="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost"/>,
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery"/>] to only receive updates of these types.
            See <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> for a complete list of available update types. Specify
            an empty list to receive all update types except <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>
            (default). If not specified, the previous setting will be used.
            </summary>
            <remarks>
            Please note that this parameter doesn't affect updates created before the call to the
            getUpdates, so unwanted updates may be received for a short period of time.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.GetUpdatesRequest.#ctor">
            <summary>
            Initializes a new GetUpdates request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetWebhookInfoRequest">
            <summary>
            Use this method to get current webhook status. Requires no parameters. On success, returns
            a <see cref="T:Telegram.Bot.Types.WebhookInfo"/> object. If the bot is using <see cref="T:Telegram.Bot.Requests.GetUpdatesRequest"/>,
            will return an object with the <see cref="P:Telegram.Bot.Types.WebhookInfo.Url"/> field empty.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetWebhookInfoRequest.#ctor">
            <summary>
            Initializes a new request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetWebhookRequest">
            <summary>
            Use this method to specify a url and receive incoming updates via an outgoing webhook.
            Whenever there is an update for the bot, we will send an HTTPS POST request to the
            specified url, containing a JSON-serialized <see cref="T:Telegram.Bot.Types.Update"/>. In case of
            an unsuccessful request, we will give up after a reasonable amount of attempts.
            Returns <c>true</c> on success.
            <para>
            If you'd like to make sure that the Webhook request comes from Telegram, we recommend
            using a secret path in the URL, e.g. <c>https://www.example.com/&lt;token&gt;</c>.
            Since nobody else knows your bot's token, you can be pretty sure it's us.
            </para>
            <remarks>
            <list type="number">
            <item>
            You will not be able to receive updates using <see cref="T:Telegram.Bot.Requests.GetUpdatesRequest"/> for as long as an outgoing
            webhook is set up.</item>
            <item>
            To use a self-signed certificate, you need to upload your
            <see href="https://core.telegram.org/bots/self-signed">public key certificate</see> using
            <see cref="P:Telegram.Bot.Requests.SetWebhookRequest.Certificate"/> parameter. Please upload as <see cref="T:Telegram.Bot.Types.InputFiles.InputFileStream"/>, sending
            a String will not work.
            </item>
            <item>Ports currently supported for Webhooks: <b>443, 80, 88, 8443</b></item>
            </list>
            If you're having any trouble setting up webhooks, please check out this
            <see href="https://core.telegram.org/bots/webhooks">amazing guide to Webhooks</see>.
            </remarks>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.Url">
            <summary>
            HTTPS url to send updates to. Use an empty string to remove webhook integration
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.Certificate">
            <summary>
            Upload your public key certificate so that the root certificate in use can be checked. See
            our <see href="https://core.telegram.org/bots/self-signed">self-signed guide</see> for details
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.IpAddress">
            <summary>
            The fixed IP address which will be used to send webhook requests instead of the
            IP address resolved through DNS
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.MaxConnections">
            <summary>
            Maximum allowed number of simultaneous HTTPS connections to the webhook for update
            delivery, 1-100. Defaults to <i>40</i>. Use lower values to limit the load on your
            bot's server, and higher values to increase your bot's throughput
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.AllowedUpdates">
            <summary>
            A list of the update types you want your bot to receive. For example, specify
            [<see cref="F:Telegram.Bot.Types.Enums.UpdateType.Message"/>, <see cref="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost"/>,
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery"/>] to only receive updates of these types.
            See <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> for a complete list of available update types.
            Specify an empty list to receive all update types except
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/> (default). If not specified,
            the previous setting will be used
            </summary>
            <remarks>
            Please note that this parameter doesn't affect updates created before the call to the
            <see cref="T:Telegram.Bot.Requests.SetWebhookRequest"/>, so unwanted updates may be received for a short period of time.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.DropPendingUpdates">
            <summary>
            Pass <c>true</c> to drop all pending updates
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetWebhookRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with uri
            </summary>
            <param name="url">
            HTTPS url to send updates to. Use an empty string to remove webhook integration
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SetWebhookRequest.ToHttpContent">
            <inheritdoc cref="M:Telegram.Bot.Requests.RequestBase`1.ToHttpContent"/>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerInlineQueryRequest">
            <summary>
            Use this method to send answers to an inline query. On success, <c>true</c> is returned.
            </summary>
            <remarks>
            No more than <b>50</b> results per query are allowed.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.InlineQueryId">
            <summary>
            Unique identifier for the answered query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.Results">
            <summary>
            An array of results for the inline query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.CacheTime">
            <summary>
            The maximum amount of time in seconds that the result of the
            inline query may be cached on the server. Defaults to 300
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.IsPersonal">
            <summary>
            Pass <c>true</c>, if results may be cached on the server side only for the user that sent
            the query. By default, results may be returned to any user who sends the same query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.NextOffset">
            <summary>
            Pass the offset that a client should send in the next query with the same text to
            receive more results. Pass an empty string if there are no more results or if you
            don't support pagination. Offset length can't exceed 64 bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.SwitchPmText">
            <summary>
            If passed, clients will display a button with specified text that switches the
            user to a private chat with the bot and sends the bot a start message with the
            parameter <see cref="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.SwitchPmParameter"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.SwitchPmParameter">
            <summary>
            <see href="https://core.telegram.org/bots#deep-linking">Deep-linking</see> parameter for
            the <c>/start</c> message sent to the bot when user presses the switch button.
            1-64 characters, only <c>A-Z</c>, <c>a-z</c>, <c>0-9</c>, <c>_</c> and <c>-</c> are allowed.
            </summary>
            <example>
            An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube
            account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube
            account' button above the results, or even before showing any. The user presses the button,
            switches to a private chat with the bot and, in doing so, passes a start parameter that
            instructs the bot to return an oauth link. Once done, the bot can offer a
            <see cref="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQuery"/> button so that the
            user can easily return to the chat where they wanted to use the bot's inline capabilities.
            </example>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerInlineQueryRequest.#ctor(System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InlineQueryResults.InlineQueryResult})">
            <summary>
            Initializes a new request with inlineQueryId and an array of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/>
            </summary>
            <param name="inlineQueryId">Unique identifier for the answered query</param>
            <param name="results">An array of results for the inline query</param>
        </member>
        <member name="T:Telegram.Bot.Requests.ParameterlessRequest`1">
            <summary>
            Represents a request that doesn't require any parameters
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Telegram.Bot.Requests.ParameterlessRequest`1.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Requests.ParameterlessRequest`1"/>
            </summary>
            <param name="methodName">Name of request method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.ParameterlessRequest`1.#ctor(System.String,System.Net.Http.HttpMethod)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Requests.ParameterlessRequest`1"/>
            </summary>
            <param name="methodName">Name of request method</param>
            <param name="method">HTTP request method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.ParameterlessRequest`1.ToHttpContent">
            <inheritdoc cref="M:Telegram.Bot.Requests.RequestBase`1.ToHttpContent"/>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest">
            <summary>
            Once the user has confirmed their payment and shipping details, the Bot API sends the final
            confirmation in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field
            <see cref="P:Telegram.Bot.Types.Update.PreCheckoutQuery"/>. Use this method to respond to such pre-checkout
            queries. On success, <c>true</c> is returned.
            </summary>
            <remarks>
            The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.PreCheckoutQueryId">
            <summary>
            Unique identifier for the query to be answered
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.Ok">
            <summary>
            Specify True if everything is alright (goods are available, etc.) and the
            bot is ready to proceed with the order. Use False if there are any problems.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.ErrorMessage">
            <summary>
            Required if <see cref="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.Ok"/> is False. Error message in human readable form that explains
            the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought
            the last of our amazing black T-shirts while you were busy filling out your payment details.
            Please choose a different color or garment!"). Telegram will display this message to the user.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.#ctor(System.String)">
            <summary>
            Initializes a new successful answerPreCheckoutQuery request
            </summary>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new failing answerPreCheckoutQuery request with error message
            </summary>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">
            Required if <see cref="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.Ok"/> is <c>true</c>. Error message in human readable form that explains the
            reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of
            our amazing black T-shirts while you were busy filling out your payment details. Please
            choose a different color or garment!"). Telegram will display this message to the user.
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerShippingQueryRequest">
            <summary>
            If you sent an invoice requesting a shipping address and the parameter
            <see cref="P:Telegram.Bot.Requests.SendInvoiceRequest.IsFlexible"/> was specified, the Bot API will send an
            <see cref="T:Telegram.Bot.Types.Update"/> with a <see cref="P:Telegram.Bot.Types.Update.ShippingQuery"/> field to the
            bot. Use this method to reply to shipping queries. On success, <c>true</c> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.ShippingQueryId">
            <summary>
            Unique identifier for the query to be answered
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.Ok">
            <summary>
            Specify <c>true</c> if delivery to the specified address is possible and <c>false</c>
            if there are any problems (for example, if delivery to the specified address is not possible)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.ShippingOptions">
            <summary>
            Required if <see cref="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.Ok"/> is True. An array of available shipping options.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.ErrorMessage">
            <summary>
            Required if <see cref="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.Ok"/> is False. Error message in human readable form that explains
            why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address
            is unavailable'). Telegram will display this message to the user.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerShippingQueryRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new failing answerShippingQuery request with error message
            </summary>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">Error message in human readable form</param>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerShippingQueryRequest.#ctor(System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption})">
            <summary>
            Initializes a new successful answerShippingQuery request with shipping options
            </summary>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="shippingOptions">A JSON-serialized array of available shipping options</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendInvoiceRequest">
            <summary>
            Use this method to send invoices. On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ChatId">
            <summary>
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Telegram#Bot#Requests#Abstractions#IChatTargetable#ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Title">
            <summary>
            Product name, 1-32 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Description">
            <summary>
            Product description, 1-255 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Payload">
            <summary>
            Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,
            use for your internal processes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ProviderToken">
            <summary>
            Payments provider token, obtained via <see href="https://t.me/botfather">@Botfather</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Currency">
            <summary>
            Three-letter ISO 4217 currency code, see
            <see href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Prices">
            <summary>
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost,
            delivery tax, bonus, etc.)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.MaxTipAmount">
            <summary>
            The maximum accepted amount for tips in the smallest units of the currency.
            For example, for a maximum tip of <c>US$ 1.45</c> pass <c><see cref="P:Telegram.Bot.Requests.SendInvoiceRequest.MaxTipAmount"/> = 145</c>.
            See the <i>exp</i> parameter in
            <see href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</see>,
            it shows the number of digits past the decimal point for each currency (2 for the majority
            of currencies). Defaults to 0
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.SuggestedTipAmounts">
            <summary>
            An array of suggested amounts of tips in the <i>smallest units</i> of the currency. At most 4
            suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a
            strictly increased order and must not exceed <see cref="P:Telegram.Bot.Requests.SendInvoiceRequest.MaxTipAmount"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.StartParameter">
            <summary>
            Unique deep-linking parameter. If left empty, <b>forwarded copies</b> of the sent message will
            have a <i>Pay</i> button, allowing multiple users to pay directly from the forwarded message,
            using the same invoice. If non-empty, forwarded copies of the sent message will have a <i>URL</i>
            button with a deep link to the bot (instead of a <i>Pay</i> button), with the value used as the
            start parameter
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ProviderData">
            <summary>
            A JSON-serialized data about the invoice, which will be shared with the payment provider.
            A detailed description of required fields should be provided by the payment provider.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoUrl">
            <summary>
            URL of the product photo for the invoice. Can be a photo of the goods or a marketing image
            for a service. People like it better when they see what they are paying for.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoSize">
            <summary>
            Photo size
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoWidth">
            <summary>
            Photo width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoHeight">
            <summary>
            Photo height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedName">
            <summary>
            Pass True, if you require the user's full name to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedPhoneNumber">
            <summary>
            Pass True, if you require the user's phone number to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedEmail">
            <summary>
            Pass True, if you require the user's email to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedShippingAddress">
            <summary>
            Pass True, if you require the user's shipping address to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.SendPhoneNumberToProvider">
            <summary>
            Pass True, if user's phone number should be sent to provider
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.SendEmailToProvider">
             <summary>
            Pass True, if user's email address should be sent to provider
             </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.IsFlexible">
            <summary>
            Pass True, if the final price depends on the shipping method
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification" />
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId" />
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply" />
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup" />
        </member>
        <member name="M:Telegram.Bot.Requests.SendInvoiceRequest.#ctor(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice})">
            <summary>
            Initializes a new request with chatId, title, description, payload, providerToken, currency
            and an array of <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/>
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes</param>
            <param name="providerToken">
            Payments provider token, obtained via <see href="https://t.me/botfather">@Botfather</see>
            </param>
            <param name="currency">
            Three-letter ISO 4217 currency code, see
            <see href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</see>
            </param>
            <param name="prices">
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost,
            delivery tax, bonus, etc.)
            </param>
        </member>
        <member name="T:Telegram.Bot.Requests.RequestBase`1">
            <summary>
            Represents an API request
            </summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.Method">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.MethodName">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Requests.RequestBase`1.#ctor(System.String)">
            <summary>
            Initializes an instance of request
            </summary>
            <param name="methodName">Bot API method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.RequestBase`1.#ctor(System.String,System.Net.Http.HttpMethod)">
            <summary>
            Initializes an instance of request
            </summary>
            <param name="methodName">Bot API method</param>
            <param name="method">HTTP method to use</param>
        </member>
        <member name="M:Telegram.Bot.Requests.RequestBase`1.ToHttpContent">
            <summary>
            Generate content of HTTP message
            </summary>
            <returns>Content of HTTP request</returns>
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.IsWebhookResponse">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.WebHookMethodName">
            <summary>
            If <see cref="P:Telegram.Bot.Requests.RequestBase`1.IsWebhookResponse"/> is set to <see langword="true"/> is set to the method
            name, otherwise it won't be serialized
            </summary>
        </member>
        <member name="T:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest">
            <summary>
            Use this request to add a new sticker to a set created by the bot. Animated stickers can be
            added to animated sticker sets and only to them. Animated sticker sets can have up to 50
            stickers. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest.Name">
            <summary>
            Sticker set name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest.TgsSticker">
            <summary>
            <b>TGS</b> animation with the sticker, uploaded using multipart/form-data.
            See <see href="https://core.telegram.org/animated_stickers#technical-requirements"/>
            for technical requirements
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest.Emojis">
            <summary>
            One or more emoji corresponding to the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest.MaskPosition">
            <summary>
            An object for position where the mask should be placed on faces
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest.#ctor(System.Int64,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String)">
            <summary>
            Initializes a new request with userId, name, tgsSticker and emojis
            </summary>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="tgsSticker">
            <b>TGS</b> animation with the sticker, uploaded using multipart/form-data.
            See <see href="https://core.telegram.org/animated_stickers#technical-requirements"/>
            for technical requirements
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
        </member>
        <member name="M:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.AddStickerToSetRequest">
            <summary>
            Use this request to add a new sticker to a set created by the bot. Static sticker sets
            can have up to 120 stickers. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.Name">
            <summary>
            Sticker set name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.PngSticker">
            <summary>
            <para>
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must
            not exceed 512px, and either width or height must be exactly 512px.
            </para>
            <para>
            Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as a String to send a file that already
            exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet,
            or upload a new one using multipart/form-data
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.Emojis">
            <summary>
            One or more emoji corresponding to the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.MaskPosition">
            <summary>
            An object for position where the mask should be placed on faces
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AddStickerToSetRequest.#ctor(System.Int64,System.String,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String)">
            <summary>
            Initializes a new request with userId, name, pngSticker and emojis
            </summary>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="pngSticker">
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must
            not exceed 512px, and either width or height must be exactly 512px. Pass a
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as a String to send a file
            that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram
            to get a file from the Internet, or upload a new one using multipart/form-data
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
        </member>
        <member name="M:Telegram.Bot.Requests.AddStickerToSetRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest">
            <summary>
            Use this method to create a new animated sticker set owned by a user. The bot will be able to
            edit the sticker set thus created. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.Name">
            <summary>
            Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>).
            Can contain only english letters, digits and underscores. Must begin with a letter, can't
            contain consecutive underscores and must end in <i>"_by_&lt;bot username&gt;"</i>.
            <i>&lt;bot_username&gt;</i> is case insensitive. 1-64 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.Title">
            <summary>
            Sticker set title, 1-64 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.TgsSticker">
            <summary>
            <b>TGS</b> animation with the sticker, uploaded using multipart/form-data. See
            <see href="https://core.telegram.org/animated_stickers#technical-requirements"/>
            for technical requirements
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.Emojis">
            <summary>
            One or more emoji corresponding to the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.ContainsMasks">
            <summary>
            Pass True, if a set of mask stickers should be created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.MaskPosition">
            <summary>
            An object for position where the mask should be placed on faces
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.#ctor(System.Int64,System.String,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String)">
            <summary>
            Initializes a new request with userId, name, tgsSticker and emojis
            </summary>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">
            Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>).
            Can contain only english letters, digits and underscores. Must begin with a letter, can't
            contain consecutive underscores and must end in <i>"_by_&lt;bot username&gt;"</i>.
            <i>&lt;bot_username&gt;</i> is case insensitive. 1-64 characters
            </param>
            <param name="title">Sticker set title, 1-64 characters</param>
            <param name="tgsSticker">
            <b>TGS</b> animation with the sticker, uploaded using multipart/form-data. See
            <see href="https://core.telegram.org/animated_stickers#technical-requirements"/>
            for technical requirements
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.CreateNewStickerSetRequest">
            <summary>
            Use this method to create a new static sticker set owned by a user. The bot will be able to edit
            the sticker set thus created. Returns True on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.Name">
            <summary>
            Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>).
            Can contain only english letters, digits and underscores. Must begin with a letter, can't
            contain consecutive underscores and must end in <i>"_by_&lt;bot username&gt;"</i>.
            <i>&lt;bot_username&gt;</i> is case insensitive. 1-64 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.Title">
            <summary>
            Sticker set title, 1-64 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.PngSticker">
            <summary>
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must
            not exceed 512px, and either width or height must be exactly 512px. Pass a
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as a String to send a file that
            already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to
            get a file from the Internet, or upload a new one using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.Emojis">
            <summary>
            One or more emoji corresponding to the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.ContainsMasks">
            <summary>
            Pass True, if a set of mask stickers should be created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.MaskPosition">
            <summary>
            An object for position where the mask should be placed on faces
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateNewStickerSetRequest.#ctor(System.Int64,System.String,System.String,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String)">
            <summary>
            Initializes a new request with userId, name, pngSticker and emojis
            </summary>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">
            Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>).
            Can contain only english letters, digits and underscores. Must begin with a letter, can't
            contain consecutive underscores and must end in <i>"_by_&lt;bot username&gt;"</i>.
            <i>&lt;bot_username&gt;</i> is case insensitive. 1-64 characters
            </param>
            <param name="title">Sticker set title, 1-64 characters</param>
            <param name="pngSticker">
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must not
            exceed 512px, and either width or height must be exactly 512px. Pass a
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as a String to send a file that
            already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get
            a file from the Internet, or upload a new one using multipart/form-data
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateNewStickerSetRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteStickerFromSetRequest">
            <summary>
            Use this method to delete a sticker from a set created by the bot. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteStickerFromSetRequest.Sticker">
            <summary>
            File identifier of the sticker
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteStickerFromSetRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with sticker
            </summary>
            <param name="sticker">File identifier of the sticker</param>
        </member>
        <member name="T:Telegram.Bot.Requests.GetStickerSetRequest">
            <summary>
            Use this method to get a sticker set. On success, a <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetStickerSetRequest.Name">
            <summary>
            Name of the sticker set
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetStickerSetRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with name
            </summary>
            <param name="name">Name of the sticker set</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SendStickerRequest">
            <summary>
            Use this method to send static .WEBP or animated .TGS stickers. On success, the sent
            <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.Sticker">
            <summary>
            Sticker to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get
            a .WEBP file from the Internet, or upload a new one using multipart/form-data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.DisableNotification">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.DisableNotification"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.ReplyToMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyToMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.AllowSendingWithoutReply">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.AllowSendingWithoutReply"/>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.SendStickerRequest.#ctor(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile)">
            <summary>
            Initializes a new request chatId and sticker
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="sticker">
            Sticker to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as string to send a file
            that exists on the Telegram servers (recommended), pass an HTTP URL as a string for
            Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.SendStickerRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerPositionInSetRequest">
            <summary>
            Use this method to move a sticker in a set created by the bot to a specific position.
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerPositionInSetRequest.Sticker">
            <summary>
            File identifier of the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerPositionInSetRequest.Position">
            <summary>
            New sticker position in the set, zero-based
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerPositionInSetRequest.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new request with sticker and position
            </summary>
            <param name="sticker">File identifier of the sticker</param>
            <param name="position">New sticker position in the set, zero-based</param>
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerSetThumbRequest">
            <summary>
            Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for
            animated sticker sets only. Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetThumbRequest.Name">
            <summary>
            Sticker set name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetThumbRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetThumbRequest.Thumb">
            <summary>
            A <b>PNG</b> image with the thumbnail, must be up to 128 kilobytes in size and have width
            and height exactly 100px, or a <b>TGS</b> animation with the thumbnail up to 32 kilobytes in
            size; see <see href="https://core.telegram.org/animated_stickers#technical-requirements"/>
            for animated sticker technical requirements. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/>
            as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as
            a String for Telegram to get a file from the Internet, or upload a new one using
            multipart/form-data. Animated sticker set thumbnail can't be uploaded via HTTP URL
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerSetThumbRequest.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new request with sticker and position
            </summary>
            <param name="name">Sticker set name</param>
            <param name="userId">User identifier of the sticker set owner</param>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerSetThumbRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.UploadStickerFileRequest">
            <summary>
            Use this method to upload a .PNG file with a sticker for later use in
            <see cref="T:Telegram.Bot.Requests.CreateNewStickerSetRequest"/>/<see cref="T:Telegram.Bot.Requests.CreateNewAnimatedStickerSetRequest"/> and
            <see cref="T:Telegram.Bot.Requests.AddStickerToSetRequest"/>/<see cref="T:Telegram.Bot.Requests.AddAnimatedStickerToSetRequest"/> methods
            (can be used multiple times). Returns the uploaded <see cref="T:Telegram.Bot.Types.File"/> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UploadStickerFileRequest.UserId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.UploadStickerFileRequest.PngSticker">
            <summary>
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must not
            exceed 512px, and either width or height must be exactly 512px
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UploadStickerFileRequest.#ctor(System.Int64,Telegram.Bot.Types.InputFiles.InputFileStream)">
            <summary>
            Initializes a new request with userId and pngSticker
            </summary>
            <param name="userId">User identifier of sticker file owner</param>
            <param name="pngSticker">
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must not
            exceed 512px, and either width or height must be exactly 512px
            </param>
        </member>
        <member name="M:Telegram.Bot.Requests.UploadStickerFileRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteMessageRequest">
            <summary>
            Use this method to delete a message, including service messages, with the following limitations:
            <list type="bullet">
            <item>A message can only be deleted if it was sent less than 48 hours ago</item>
            <item>A dice message in a private chat can only be deleted if it was sent more than 24 hours ago</item>
            <item>Bots can delete outgoing messages in private chats, groups, and supergroups</item>
            <item>Bots can delete incoming messages in private chats</item>
            <item>Bots granted can_post_messages permissions can delete outgoing messages in channels</item>
            <item>If the bot is an administrator of a group, it can delete any message there</item>
            <item>
            If the bot has can_delete_messages permission in a supergroup or a channel,
            it can delete any message there
            </item>
            </list>
            Returns <c>true</c> on success.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMessageRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMessageRequest.MessageId">
            <summary>
            Identifier of the message to delete
            </summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteMessageRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId and messageId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to delete</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageCaptionRequest">
            <summary>
            Use this method to edit captions of messages. On success <c>true</c> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.Caption">
            <summary>
            New caption of the message, 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with inlineMessageId and new caption
            </summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageMediaRequest">
            <summary>
            Use this method to edit animation, audio, document, photo, or video messages. If a message is
            part of a message album, then it can be edited only to an audio for audio albums, only to a
            document for document albums and to a photo or a video otherwise. Use a previously uploaded file
            via its <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> or specify a URL. On success
            <c>true</c> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageMediaRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageMediaRequest.Media">
            <summary>
            A new media content of the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageMediaRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageMediaRequest.#ctor(System.String,Telegram.Bot.Types.InputMediaBase)">
            <summary>
            Initializes a new request with inlineMessageId and new media
            </summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="media">A new media content of the message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest">
            <summary>
            Use this method to edit only the reply markup of messages. On success <c>true</c> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest.#ctor(System.String)">
            <summary>
            Initializes a new request with inlineMessageId and new inline keyboard
            </summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageTextRequest">
            <summary>
            Use this method to edit text and game messages. On success <c>true</c> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.InlineMessageId">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineMessageId"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.Text">
            <summary>
            New text of the message, 1-4096 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.Entities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Entities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.DisableWebPagePreview">
            <summary>
            Disables link previews for links in this message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageTextRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new request with inlineMessageId and new text
            </summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageCaptionRequest">
            <summary>
            Use this method to edit captions of messages. On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.MessageId">
            <summary>
            Identifier of the message to edit
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.Caption">
            <summary>
            New caption of the message, 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.CaptionEntities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageCaptionRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId and messageIdn
            </summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageMediaRequest">
            <summary>
            Use this method to edit animation, audio, document, photo, or video messages. If a message is part
            of a message album, then it can be edited only to an audio for audio albums, only to a
            document for document albums and to a photo or a video otherwise. Use a previously uploaded
            file via its <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> or specify a URL.
            On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.MessageId">
            <summary>
            Identifier of the message to edit
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.Media">
            <summary>
            A new media content of the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageMediaRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMediaBase)">
            <summary>
            Initializes a new request with chatId, messageId and new media
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="media">A new media content of the message</param>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageMediaRequest.ToHttpContent">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageReplyMarkupRequest">
            <summary>
            Use this method to edit only the reply markup of messages. On success the edited
            <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.MessageId">
            <summary>
            Identifier of the message to edit
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId and messageId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageTextRequest">
            <summary>
            Use this method to edit text and game messages. On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.MessageId">
            <summary>
            Identifier of the message to edit
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.Text">
            <summary>
            New text of the message, 1-4096 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ParseMode"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.Entities">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.Entities"/>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.DisableWebPagePreview">
            <summary>
            Disables link previews for links in this message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.ReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageTextRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32,System.String)">
            <summary>
            Initializes a new request with chatId, messageId and text
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
        </member>
        <member name="T:Telegram.Bot.Requests.StopPollRequest">
            <summary>
            Use this method to stop a poll which was sent by the bot. On success, the stopped <see cref="T:Telegram.Bot.Types.Poll"/>
            with the final results is returned.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopPollRequest.ChatId">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Requests.StopPollRequest.MessageId">
            <summary>
            Identifier of the original message with the poll
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopPollRequest.ReplyMarkup">
            <inheritdoc cref="F:Telegram.Bot.Requests.Abstractions.Documentation.InlineReplyMarkup"/>
        </member>
        <member name="M:Telegram.Bot.Requests.StopPollRequest.#ctor(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>
            Initializes a new request with chatId, messageId
            </summary>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel (in the format
            <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the original message with the poll</param>
        </member>
        <member name="T:Telegram.Bot.TelegramBotClient">
            <summary>
            A client to use the Telegram Bot API
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.BotId">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.Timeout">
            <summary>
            Timeout for requests
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.ExceptionsParser">
            <inheritdoc />
        </member>
        <member name="E:Telegram.Bot.TelegramBotClient.OnMakingApiRequest">
            <summary>
            Occurs before sending a request to API
            </summary>
        </member>
        <member name="E:Telegram.Bot.TelegramBotClient.OnApiResponseReceived">
            <summary>
            Occurs after receiving the response to an API request
            </summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.#ctor(System.String,System.Net.Http.HttpClient,System.String)">
            <summary>
            Create a new <see cref="T:Telegram.Bot.TelegramBotClient"/> instance.
            </summary>
            <param name="token">API token</param>
            <param name="httpClient">A custom <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="baseUrl">
            Used to change base url to your private bot api server URL. It looks like
            http://localhost:8081. Path, query and fragment will be omitted if present.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="token"/> format is invalid
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="baseUrl"/> format is invalid
            </exception>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.MakeRequestAsync``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.TestApiAsync(System.Threading.CancellationToken)">
            <summary>
            Test the API token
            </summary>
            <returns><c>true</c> if token is valid</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.DownloadFileAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.TelegramBotClientExtensions">
            <summary>
            Extension methods that map to requests from Bot API documentation
            </summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">
            <summary>
            Use this method to receive incoming updates using long polling
            (<see href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</see>)
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="offset">
            Identifier of the first update to be returned. Must be greater by one than the highest among the
            identifiers of previously received updates. By default, updates starting with the earliest unconfirmed
            update are returned. An update is considered confirmed as soon as <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)"/> is called
            with an <paramref name="offset"/> higher than its <see cref="P:Telegram.Bot.Types.Update.Id"/>. The negative offset can be
            specified to retrieve updates starting from <paramref name="offset">-offset</paramref> update from the end
            of the updates queue. All previous updates will forgotten.
            </param>
            <param name="limit">
            Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100
            </param>
            <param name="timeout">
            Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short
            polling should be used for testing purposes only.
            </param>
            <param name="allowedUpdates">
            A list of the update types you want your bot to receive. For example, specify
            [<see cref="F:Telegram.Bot.Types.Enums.UpdateType.Message"/>, <see cref="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost"/>,
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery"/>] to only receive updates of these types. See
            <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> for a complete list of available update types. Specify an empty list to receive
            all update types except <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/> (default). If not specified, the previous
            setting will be used.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <remarks>
            <list type="number">
            <item>This method will not work if an outgoing webhook is set up</item>
            <item>
            In order to avoid getting duplicate updates, recalculate <paramref name="offset"/> after each server
            response
            </item>
            </list>
            </remarks>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetWebhookAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is
            an update for the bot, we will send an HTTPS POST request to the specified url, containing a
            JSON-serialized <see cref="T:Telegram.Bot.Types.Update"/>. In case of an unsuccessful request, we will give up after a
            reasonable amount of attempts
            <para>
            If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path
            in the URL, e.g. <c>https://www.example.com/&lt;token&gt;</c>. Since nobody else knows your bot's token,
            you can be pretty sure it's us.
            </para>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="url">HTTPS url to send updates to. Use an empty string to remove webhook integration</param>
            <param name="certificate">
            Upload your public key certificate so that the root certificate in use can be checked. See our
            <see href="https://core.telegram.org/bots/self-signed">self-signed guide</see> for details
            </param>
            <param name="ipAddress">
            The fixed IP address which will be used to send webhook requests instead of the IP address resolved
            through DNS
            </param>
            <param name="maxConnections">
            Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100.
            Defaults to <i>40</i>. Use lower values to limit the load on your bot's server, and higher values to
            increase your bot's throughput
            </param>
            <param name="allowedUpdates">
            <para>A list of the update types you want your bot to receive. For example, specify
            [<see cref="F:Telegram.Bot.Types.Enums.UpdateType.Message"/>, <see cref="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost"/>,
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery"/>] to only receive updates of these types. See
            <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> for a complete list of available update types. Specify an empty list to receive
            all update types except <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/> (default). If not specified, the previous
            setting will be used
            </para>
            <para>
            Please note that this parameter doesn't affect updates created before the call to the
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetWebhookAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Nullable{System.Boolean},System.Threading.CancellationToken)"/>, so unwanted updates may be received for a short period of time.
            </para>
            </param>
            <param name="dropPendingUpdates">Pass <c>true</c> to drop all pending updates</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <remarks>
            <list type="number">
            <item>
            You will not be able to receive updates using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)"/> for as long as an outgoing
            webhook is set up
            </item>
            <item>
            To use a self-signed certificate, you need to upload your
            <see href="https://core.telegram.org/bots/self-signed">public key certificate</see> using
            <paramref name="certificate"/> parameter. Please upload as <see cref="T:Telegram.Bot.Types.InputFiles.InputFileStream"/>, sending a
            string will not work
            </item>
            <item>Ports currently supported for Webhooks: <b>443, 80, 88, 8443</b></item>
            </list>
            If you're having any trouble setting up webhooks, please check out this
            <see href="https://core.telegram.org/bots/webhooks">amazing guide to Webhooks</see>.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteWebhookAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to remove webhook integration if you decide to switch back to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)"/>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="dropPendingUpdates">Pass <c>true</c> to drop all pending updates</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetWebhookInfoAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Use this method to get current webhook status.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success, returns a <see cref="T:Telegram.Bot.Types.WebhookInfo"/> object. If the bot is using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)"/>,
            will return an object with the <see cref="P:Telegram.Bot.Types.WebhookInfo.Url"/> field empty.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMeAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            A simple method for testing your bot's auth token.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns basic information about the bot in form of a <see cref="T:Telegram.Bot.Types.User"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LogOutAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Use this method to log out from the cloud Bot API server before launching the bot locally. You <b>must</b>
            log out the bot before running it locally, otherwise there is no guarantee that the bot will receive
            updates. After a successful call, you can immediately log in on a local server, but will not be able to
            log in back to the cloud Bot API server for 10 minutes.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Use this method to close the bot instance before moving it from one local server to another. You need to
            delete the webhook before calling this method to ensure that the bot isn't launched again after server
            restart. The method will return error 429 in the first 10 minutes after the bot is launched.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendTextMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send text messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="text">Text of the message to be sent, 1-4096 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for more
            details
            </param>
            <param name="entities">
            List of special entities that appear in message text, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableWebPagePreview">Disables link previews for links in this message</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a
            reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to forward messages of any kind. Service messages can't be forwarded.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to copy messages of any kind. Service messages and invoice messages can't be copied.
            The method is analogous to the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Boolean},System.Threading.CancellationToken)"/>, but the copied message doesn't
            have a link to the original message.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="caption">
            New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption
            is kept
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent message on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send photos.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="photo">
            Photo to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a photo that exists on
            the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from
            the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size.
            The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20
            </param>
            <param name="caption">
            Photo caption (may also be used when resending photos by <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/>),
            0-1024 characters after entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAudioAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.String,System.String,Telegram.Bot.Types.InputMedia,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display them in the music player.
            Your audio must be in the .MP3 or .M4A format. Bots can currently send audio files of up to 50 MB in size,
            this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="audio">
            Audio file to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send an audio file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio
            file from the Internet, or upload a new one using multipart/form-data
            </param>
            <param name="caption">Audio caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="thumb">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height
            should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be
            reused and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDocumentAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,Telegram.Bot.Types.InputMedia,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send general files. Bots can currently send files of any type of up to 50 MB in size,
            this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="document">
            File to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet,
            or upload a new one using multipart/form-data
            </param>
            <param name="thumb">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="caption">
            Document caption (may also be used when resending documents by file_id), 0-1024 characters after
            entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableContentTypeDetection">
            Disables automatic server-side content type detection for files uploaded using multipart/form-data
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputMedia,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as
            <see cref="T:Telegram.Bot.Types.Document"/>). Bots can currently send video files of up to 50 MB in size, this limit may be
            changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="video">
            Video to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a video that exists on
            the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the
            Internet, or upload a new video using multipart/form-data
            </param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="width">Video width</param>
            <param name="height">Video height</param>
            <param name="thumb">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="caption">
            Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="supportsStreaming">Pass <c>true</c>, if the uploaded video is suitable for streaming</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAnimationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputMedia,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). Bots can currently
            send animation files of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="animation">
            Animation to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send an animation that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an
            animation from the Internet, or upload a new animation using multipart/form-data
            </param>
            <param name="duration">Duration of sent animation in seconds</param>
            <param name="width">Animation width</param>
            <param name="height">Animation height</param>
            <param name="thumb">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="caption">
            Animation caption (may also be used when resending animation by <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/>),
            0-1024 characters after entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVoiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice
            message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent
            as <see cref="T:Telegram.Bot.Types.Audio"/> or <see cref="T:Telegram.Bot.Types.Document"/>). Bots can currently send voice messages of up to 50 MB
            in size, this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="voice">
            Audio file to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a file that exists
            on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from
            the Internet, or upload a new one using multipart/form-data
            </param>
            <param name="caption">Voice message caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="duration">Duration of the voice message in seconds</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNoteAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputTelegramFile,System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputMedia,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            As of <see href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</see>, Telegram clients
            support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="videoNote">
            Video note to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a video note that
            exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. Sending
            video notes by a URL is currently unsupported
            </param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="length">Video width and height, i.e. diameter of the video message</param>
            <param name="thumb">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendMediaGroupAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.IAlbumInputMedia},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio
            files can be only grouped in an album with messages of the same type.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="media">An array describing messages to be sent, must include 2-10 items</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, an array of <see cref="T:Telegram.Bot.Types.Message"/>s that were sent is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send point on the map.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="latitude">Latitude of location</param>
            <param name="longitude">Longitude of location</param>
            <param name="livePeriod">
            Period in seconds for which the location will be updated, should be between 60 and 86400
            </param>
            <param name="heading">
            For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
            if specified
            </param>
            <param name="proximityAlertRadius">
            For live locations, a maximum distance for proximity alerts about approaching another chat member,
            in meters. Must be between 1 and 100000 if specified
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="horizontalAccuracy">
            The radius of uncertainty for the location, measured in meters; 0-1500
            </param>
            <param name="heading">
            Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified
            </param>
            <param name="proximityAlertRadius">
            Maximum distance for proximity alerts about approaching another chat member, in meters.
            Must be between 1 and 100000 if specified
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Double,System.Double,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="horizontalAccuracy">
            The radius of uncertainty for the location, measured in meters; 0-1500
            </param>
            <param name="heading">
            Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified
            </param>
            <param name="proximityAlertRadius">
            Maximum distance for proximity alerts about approaching another chat member, in meters.
            Must be between 1 and 100000 if specified
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to stop updating a live location message before
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to stop updating a live location message before
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVenueAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send information about a venue.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="latitude">Latitude of the venue</param>
            <param name="longitude">Longitude of the venue</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
            <param name="foursquareId">Foursquare identifier of the venue</param>
            <param name="foursquareType">
            Foursquare type of the venue, if known. (For example, “arts_entertainment/default”,
            “arts_entertainment/aquarium” or “food/icecream”.)
            </param>
            <param name="googlePlaceId">Google Places identifier of the venue</param>
            <param name="googlePlaceType">
            Google Places type of the venue. (See
            <see href="https://developers.google.com/places/web-service/supported_types">supported types</see>)
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
            <see href="https://core.telegram.org/bots/api#sendvenue"/>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendContactAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send phone contacts.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
            <param name="lastName">Contact's last name</param>
            <param name="vCard">Additional data about the contact in the form of a vCard, 0-2048 bytes</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPollAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{Telegram.Bot.Types.Enums.PollType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send a native poll.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="question">Poll question, 1-300 characters</param>
            <param name="options">A list of answer options, 2-10 strings 1-100 characters each</param>
            <param name="isAnonymous"><c>true</c>, if the poll needs to be anonymous, defaults to <c>true</c></param>
            <param name="type">
            Poll type, <see cref="F:Telegram.Bot.Types.Enums.PollType.Quiz"/> or <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular"/>,
            defaults to <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular"/>
            </param>
            <param name="allowsMultipleAnswers">
            <c>true</c>, if the poll allows multiple answers, ignored for polls in quiz mode,
            defaults to <c>false</c>
            </param>
            <param name="correctOptionId">
            0-based identifier of the correct answer option, required for polls in quiz mode
            </param>
            <param name="explanation">
            Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll,
            0-200 characters with at most 2 line feeds after entities parsing
            </param>
            <param name="explanationParseMode">
            Mode for parsing entities in the explanation. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting options</see>
            for more details
            </param>
            <param name="explanationEntities">
            List of special entities that appear in the poll explanation, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="openPeriod">
            Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together
            with <paramref name="closeDate"/>
            </param>
            <param name="closeDate">
            Point in time when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds
            in the future. Can't be used together with <paramref name="openPeriod"/>
            </param>
            <param name="isClosed">
            Pass <c>true</c>, if the poll needs to be immediately closed. This can be useful for poll preview
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{Telegram.Bot.Types.Enums.Emoji},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send an animated emoji that will display a random value.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="emoji">
            Emoji on which the dice throw animation is based. Currently, must be one of <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>,
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football"/>,
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/> or <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine"/>. Dice can have values 1-6 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts"/> and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/>, values 1-5 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball"/> and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football"/>, and values 1-64 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine"/>. Defauts to <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendChatActionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Threading.CancellationToken)">
            <summary>
            Use this method when you need to tell the user that something is happening on the bot's side. The status is
            set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).
            </summary>
            <example>
            <para>
            The <see href="https://t.me/imagebot">ImageBot</see> needs some time to process a request and upload the
            image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may
            use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendChatActionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Threading.CancellationToken)"/> with <see cref="T:System.Action"/> = <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/>.
            The user will see a “sending photo” status for the bot.
            </para>
            <para>
            We only recommend using this method when a response from the bot will take a <b>noticeable</b> amount of
            time to arrive.
            </para>
            </example>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="chatAction">
            Type of action to broadcast. Choose one, depending on what the user is about to receive:
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.Typing"/> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendTextMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">text messages</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">photos</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideo"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideo"/> for
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputMedia,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">videos</see>, <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVoice"/> or
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVoice"/> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVoiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">voice notes</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadDocument"/> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendDocumentAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,Telegram.Bot.Types.InputMedia,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">general files</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.FindLocation"/> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">location data</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideoNote"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideoNote"/> for
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNoteAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputTelegramFile,System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputMedia,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">video notes</see>
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUserProfilePhotosAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Use this method to get a list of profile pictures for a user.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="offset">
            Sequential number of the first photo to be returned. By default, all photos are returned
            </param>
            <param name="limit">
            Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.UserProfilePhotos"/> object</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can
            download files of up to 20MB in size. The file can then be downloaded via the link
            <c>https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;</c>, where <c>&lt;file_path&gt;</c>
            is taken from the response. It is guaranteed that the link will be valid for at least 1 hour.
            When the link expires, a new one can be requested by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/> again.
            </summary>
            <remarks>
            You can use <see cref="M:Telegram.Bot.ITelegramBotClient.DownloadFileAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)"/> or
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetInfoAndDownloadFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.IO.Stream,System.Threading.CancellationToken)"/> methods to download the file
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="fileId">File identifier to get info about</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.File"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetInfoAndDownloadFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Use this method to get basic info about a file download it. For the moment, bots can download files
            of up to 20MB in size.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="fileId">File identifier to get info about</param>
            <param name="destination">Destination stream to write file to</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.File"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.KickChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and
            channels, the user will not be able to return to the chat on their own using invite links, etc., unless
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.Boolean},System.Threading.CancellationToken)">unbanned</see>
            first. The bot must be an administrator in the chat for this to work and must have the appropriate
            admin rights.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="untilDate">
            Date when the user will be unbanned. If user is banned for more than 366 days or less than 30 seconds
            from the current time they are considered to be banned forever. Applied for supergroups and channels only
            </param>
            <param name="revokeMessages">
            Pass <c>true</c> to delete all messages from the chat for the user that is being removed.
            If <c>false</c>, the user will be able to see messages in the group that were sent before the user was
            removed. Always <c>true</c> for supergroups and channels
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.BanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and
            channels, the user will not be able to return to the chat on their own using invite links, etc., unless
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.Boolean},System.Threading.CancellationToken)">unbanned</see>
            first. The bot must be an administrator in the chat for this to work and must have the appropriate
            admin rights.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target group or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="untilDate">
            Date when the user will be unbanned. If user is banned for more than 366 days or less than 30 seconds
            from the current time they are considered to be banned forever. Applied for supergroups and channels only
            </param>
            <param name="revokeMessages">
            Pass <c>true</c> to delete all messages from the chat for the user that is being removed.
            If <c>false</c>, the user will be able to see messages in the group that were sent before the user was
            removed. Always <c>true</c> for supergroups and channels
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to unban a previously banned user in a supergroup or channel. The user will <b>not</b>
            return to the group or channel automatically, but will be able to join via link, etc. The bot must be an
            administrator for this to work. By default, this method guarantees that after the call the user is not a
            member of the chat, but will be able to join it. So if the user is a member of the chat they will also be
            <b>removed</b> from the chat. If you don't want this, use the parameter <paramref name="onlyIfBanned"/>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target group or username of the target supergroup or channel
            (in the format <c>@username</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="onlyIfBanned">Do nothing if the user is not banned</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RestrictChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatPermissions,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup
            for this to work and must have the appropriate admin rights. Pass <c>true</c> for all permissions to
            lift restrictions from a user.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="permissions">New user permissions</param>
            <param name="untilDate">Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever.</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PromoteChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass <c><c>false</c></c> for all boolean parameters to demote a user.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="isAnonymous">Pass <c>true</c>, if the administrator's presence in the chat is hidden</param>
            <param name="canManageChat">Pass <c>true</c>, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege</param>
            <param name="canPostMessages">Pass <c>true</c>, if the administrator can create channel posts, channels only</param>
            <param name="canEditMessages">Pass <c>true</c>, if the administrator can edit messages of other users, channels only</param>
            <param name="canDeleteMessages">Pass <c>true</c>, if the administrator can delete messages of other users</param>
            <param name="canManageVoiceChats">Pass <c>true</c>, if the administrator can manage voice chats, supergroups only</param>
            <param name="canRestrictMembers">Pass <c>true</c>, if the administrator can restrict, ban or unban chat members</param>
            <param name="canPromoteMembers">Pass <c>true</c>, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)</param>
            <param name="canChangeInfo">Pass <c>true</c>, if the administrator can change chat title, photo and other settings</param>
            <param name="canInviteUsers">Pass <c>true</c>, if the administrator can invite new users to the chat</param>
            <param name="canPinMessages">Pass <c>true</c>, if the administrator can pin messages, supergroups only</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatAdministratorCustomTitleAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to set a custom title for an administrator in a supergroup promoted by the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="customTitle">
            New custom title for the administrator; 0-16 characters, emoji are not allowed
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPermissionsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatPermissions,System.Threading.CancellationToken)">
            <summary>
            Use this method to set default chat permissions for all members. The bot must be an administrator
            in the group or a supergroup for this to work and must have the can_restrict_members admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="permissions">New default chat permissions</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to generate a new primary invite link for a chat; any previously generated primary
            link is revoked. The bot must be an administrator in the chat for this to work and must have the
            appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to create an additional invite link for a chat. The bot must be an administrator
            in the chat for this to work and must have the appropriate admin rights. The link can be revoked
            using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)"/>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">
            Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999
            </param>
            <param name="createsJoinRequest">
            Set to <c>true</c>, if users joining the chat via the link need to be approved by chat administrators.
            If <c>true</c>, <paramref name="memberLimit"/> can't be specified
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the new invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to edit a non-primary invite link created by the bot. The bot must be an
            administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="inviteLink">The invite link to edit</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">
            Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999
            </param>
            <param name="createsJoinRequest">
            Set to <c>true</c>, if users joining the chat via the link need to be approved by chat administrators.
            If <c>true</c>, <paramref name="memberLimit"/> can't be specified
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new
            link is automatically generated. The bot must be an administrator in the chat for this to work and
            must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="inviteLink">The invite link to revoke</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the revoked invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ApproveChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to approve a chat join request. The bot must be an administrator in the chat for this to
            work and must have the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right.
            Returns <c>true</c> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeclineChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to decline a chat join request. The bot must be an administrator in the chat for this to
            work and must have the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right.
            Returns <c>true</c> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputFileStream,System.Threading.CancellationToken)">
            <summary>
            Use this method to set a new profile photo for the chat. Photos can't be changed for private chats.
            The bot must be an administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="photo">New chat photo, uploaded using multipart/form-data</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an
            administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel (in the format @channelusername)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatTitleAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the title of a chat. Titles can't be changed for private chats. The bot
            must be an administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="title">New chat title, 1-255 characters</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatDescriptionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the description of a group, a supergroup or a channel. The bot must
            be an administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="description">New chat Description, 0-255 characters</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PinChatMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private
            chat, the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatPermissions.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of a message to pin</param>
            <param name="disableNotification">
            Pass <c><c>true</c></c>, if it is not necessary to send a notification to all chat members about
            the new pinned message. Notifications are always disabled in channels and private chats
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinChatMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Use this method to remove a message from the list of pinned messages in a chat. If the chat is not
            a private chat, the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">
            Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date)
            will be unpinned
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllChatMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat,
            the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LeaveChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method for your bot to leave a group, supergroup or channel.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to get up to date information about the chat (current name of the user for one-on-one
            conversations, current username of a user, group or channel, etc.)
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.Chat"/> object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAdministratorsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to get a list of administrators in a chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success, returns an Array of <see cref="T:Telegram.Bot.Types.ChatMember"/> objects that contains information about all chat
            administrators except other bots. If the chat is a group or a supergroup and no administrators were
            appointed, only the creator will be returned
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMembersCountAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the number of members in a chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns <see cref="T:System.Int32"/> on success..</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberCountAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the number of members in a chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns <see cref="T:System.Int32"/> on success..</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to get information about a member of a chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.ChatMember"/> object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatStickerSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the
            chat for this to work and must have the appropriate admin rights. Use the field
            <see cref="P:Telegram.Bot.Types.Chat.CanSetStickerSet"/> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)"/> requests to check
            if the bot can use this method.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="stickerSetName">Name of the sticker set to be set as the group sticker set</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatStickerSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the
            chat for this to work and must have the appropriate admin rights. Use the field
            <see cref="P:Telegram.Bot.Types.Chat.CanSetStickerSet"/> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)"/> requests to
            check if the bot can use this method
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerCallbackQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Use this method to send answers to callback queries sent from
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboards</see>. The answer will be displayed
            to the user as a notification at the top of the chat screen or as an alert
            </summary>
            <remarks>
            Alternatively, the user can be redirected to the specified Game URL.For this option to work, you must
            first create a game for your bot via <c>@Botfather</c> and accept the terms. Otherwise, you may use
            links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="callbackQueryId">Unique identifier for the query to be answered</param>
            <param name="text">
            Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
            </param>
            <param name="showAlert">
            If <c>true</c>, an alert will be shown by the client instead of a notification at the top of the chat
            screen. Defaults to <c>false</c>
            </param>
            <param name="url">
            URL that will be opened by the user's client. If you have created a
            <see href="https://core.telegram.org/bots/api#game">Game</see> and accepted the conditions via
            <c>@Botfather</c>, specify the URL that opens your game — note that this will only work if the query
            comes from a callback_game button
            <para>
            Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter
            </para>
            </param>
            <param name="cacheTime">
            The maximum amount of time in seconds that the result of the callback query may be cached client-side.
            Telegram apps will support caching starting in version 3.14
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyCommandsAsync(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.BotCommand},Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the list of the bot's commands.
            See <see href="https://core.telegram.org/bots#commands"/> for more details about bot commands
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="commands">
            A list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified
            </param>
            <param name="scope">
            An object, describing scope of users for which the commands are relevant.
            Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given
            <paramref name="scope"/>, for whose language there are no dedicated commands
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMyCommandsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete the list of the bot's commands for the given <paramref name="scope"/> and
            <paramref name="languageCode">user language</paramref>. After deletion,
            <see href="https://core.telegram.org/bots/api#determining-list-of-commands">higher level commands</see>
            will be shown to affected users
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="scope">
            An object, describing scope of users for which the commands are relevant.
            Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given
            <paramref name="scope"/>, for whose language there are no dedicated commands
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyCommandsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the current list of the bot's commands for the given <paramref name="scope"/> and
            <paramref name="languageCode">user language</paramref>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="scope">
            An object, describing scope of users. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code or an empty string
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns Array of <see cref="T:Telegram.Bot.Types.BotCommand"/> on success. If commands aren't set, an empty list is returned
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageTextAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit text and game messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="entities">
            List of special entities that appear in message text, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableWebPagePreview">Disables link previews for links in this message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageTextAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit text and game messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="entities">
            List of special entities that appear in message text, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableWebPagePreview">Disables link previews for links in this message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaptionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit captions of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">dentifier of the message to edit</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit captions of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting</see> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMediaAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMediaBase,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit animation, audio, document, photo, or video messages. If a message is part of
            a message album, then it can be edited only to an audio for audio albums, only to a document for document
            albums and to a photo or a video otherwise. Use a previously uploaded file via its
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> or specify a URL
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="media">A new media content of the message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMediaAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputMediaBase,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit animation, audio, document, photo, or video messages. If a message is part of
            a message album, then it can be edited only to an audio for audio albums, only to a document for document
            albums and to a photo or a video otherwise. Use a previously uploaded file via its
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> or specify a URL
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="media">A new media content of the message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkupAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit only the reply markup of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkupAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit only the reply markup of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopPollAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to stop a poll which was sent by the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the original message with the poll</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the stopped <see cref="T:Telegram.Bot.Types.Poll"/> with the final results is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a message, including service messages, with the following limitations:
            <list type="bullet">
            <item>A message can only be deleted if it was sent less than 48 hours ago</item>
            <item>A dice message in a private chat can only be deleted if it was sent more than 24 hours ago</item>
            <item>Bots can delete outgoing messages in private chats, groups, and supergroups</item>
            <item>Bots can delete incoming messages in private chats</item>
            <item>Bots granted can_post_messages permissions can delete outgoing messages in channels</item>
            <item>If the bot is an administrator of a group, it can delete any message there</item>
            <item>
            If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there
            </item>
            </list>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to delete</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendStickerAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send static .WEBP or animated .TGS stickers.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="sticker">
            Sticker to send. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as String to send a file that exists on
            the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from
            the Internet, or upload a new one using multipart/form-data
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get a sticker set.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">Name of the sticker set</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UploadStickerFileAsync(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InputFiles.InputFileStream,System.Threading.CancellationToken)">
            <summary>
            Use this method to upload a .PNG file with a sticker for later use in
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,System.Nullable{System.Boolean},Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)"/>/<see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewAnimatedStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String,System.Nullable{System.Boolean},Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)"/> and
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)"/>/<see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddAnimatedStickerToSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)"/> methods
            (can be used multiple times).
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of sticker file owner</param>
            <param name="pngSticker">
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px,
            and either width or height must be exactly 512px
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the uploaded <see cref="T:Telegram.Bot.Types.File"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,System.Nullable{System.Boolean},Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">
            <summary>
            Use this method to create a new static sticker set owned by a user. The bot will be able to edit the
            sticker set thus created.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of created sticker set owner</param>
            <param name="name">
            Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>). Can contain
            only english letters, digits and underscores. Must begin with a letter, can't contain consecutive
            underscores and must end in <i>"_by_&lt;bot username&gt;"</i>. <i>&lt;bot_username&gt;</i> is case
            insensitive. 1-64 characters
            </param>
            <param name="title">Sticker set title, 1-64 characters</param>
            <param name="pngSticker">
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px,
            and either width or height must be exactly 512px. Pass a
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as a String to send a file that already exists
            on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet,
            or upload a new one using multipart/form-data
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
            <param name="containsMasks">Pass <c>true</c>, if a set of mask stickers should be created</param>
            <param name="maskPosition">An object for position where the mask should be placed on faces</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewAnimatedStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String,System.Nullable{System.Boolean},Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">
            <summary>
            Use this method to create a new animated sticker set owned by a user. The bot will be able to edit
            the sticker set thus created.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of created sticker set owner</param>
            <param name="name">
            Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>).
            Can contain only english letters, digits and underscores. Must begin with a letter, can't contain
            consecutive underscores and must end in <i>"_by_&lt;bot username&gt;"</i>. <i>&lt;bot_username&gt;</i>
            is case insensitive. 1-64 characters
            </param>
            <param name="title">Sticker set title, 1-64 characters</param>
            <param name="tgsSticker">
            <b>TGS</b> animation with the sticker, uploaded using multipart/form-data. See
            <see href="https://core.telegram.org/animated_stickers#technical-requirements"/>
            for technical requirements
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
            <param name="containsMasks">Pass <c>true</c>, if a set of mask stickers should be created</param>
            <param name="maskPosition">An object for position where the mask should be placed on faces</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.String,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">
            <summary>
            Use this method to add a new sticker to a set created by the bot. Static sticker sets can have up
            to 120 stickers.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="pngSticker">
            <b>PNG</b> image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px,
            and either width or height must be exactly 512px. Pass a
            <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as a String to send a file that already exists
            on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet,
            or upload a new one using multipart/form-data
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
            <param name="maskPosition">An object for position where the mask should be placed on faces</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AddAnimatedStickerToSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputFiles.InputFileStream,System.String,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">
            <summary>
            Use this method to add a new sticker to a set created by the bot. Animated stickers can be added to
            animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="tgsSticker">
            <b>TGS</b> animation with the sticker, uploaded using multipart/form-data. See
            <see href="https://core.telegram.org/animated_stickers#technical-requirements"/>
            for technical requirements
            </param>
            <param name="emojis">One or more emoji corresponding to the sticker</param>
            <param name="maskPosition">An object for position where the mask should be placed on faces</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSetAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to move a sticker in a set created by the bot to a specific position.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">File identifier of the sticker</param>
            <param name="position">New sticker position in the set, zero-based</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSetAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a sticker from a set created by the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">File identifier of the sticker</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetThumbAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Int64,Telegram.Bot.Types.InputFiles.InputOnlineFile,System.Threading.CancellationToken)">
            <summary>
            Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated
            sticker sets only.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">Sticker set name</param>
            <param name="userId">User identifier of the sticker set owner</param>
            <param name="thumb">
            A <b>PNG</b> image with the thumbnail, must be up to 128 kilobytes in size and have width and height
            exactly 100px, or a <b>TGS</b> animation with the thumbnail up to 32 kilobytes in size; see
            <see href="https://core.telegram.org/animated_stickers#technical-requirements"/> for animated sticker
            technical requirements. Pass a <see cref="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId"/> as a String to send a file that
            already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from
            the Internet, or upload a new one using multipart/form-data. Animated sticker set thumbnail can't be
            uploaded via HTTP URL
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerInlineQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InlineQueryResults.InlineQueryResult},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send answers to an inline query.
            </summary>
            <remarks>
            No more than <b>50</b> results per query are allowed.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineQueryId">Unique identifier for the answered query</param>
            <param name="results">An array of results for the inline query</param>
            <param name="cacheTime">
            The maximum amount of time in seconds that the result of the inline query may be cached on the server.
            Defaults to 300
            </param>
            <param name="isPersonal">
            Pass <c>true</c>, if results may be cached on the server side only for the user that sent the query.
            By default, results may be returned to any user who sends the same query
            </param>
            <param name="nextOffset">
            Pass the offset that a client should send in the next query with the same text to receive more results.
            Pass an empty string if there are no more results or if you don't support pagination.
            Offset length can't exceed 64 bytes
            </param>
            <param name="switchPmText">
            If passed, clients will display a button with specified text that switches the user to a private chat
            with the bot and sends the bot a start message with the parameter <paramref name="switchPmParameter"/>
            </param>
            <param name="switchPmParameter">
            <see href="https://core.telegram.org/bots#deep-linking">Deep-linking</see> parameter for the <c>/start</c>
            message sent to the bot when user presses the switch button. 1-64 characters, only <c>A-Z</c>, <c>a-z</c>,
            <c>0-9</c>, <c>_</c> and <c>-</c> are allowed
            <para>
            <i>Example</i>: An inline bot that sends YouTube videos can ask the user to connect the bot to their
            YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube
            account' button above the results, or even before showing any. The user presses the button, switches
            to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to
            return an oauth link. Once done, the bot can offer a
            <see cref="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQuery"/> button so that the user can
            easily return to the chat where they wanted to use the bot's inline capabilities
            </para>
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendInvoiceAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send invoices.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">
            Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,
            use for your internal processes
            </param>
            <param name="providerToken">
            Payments provider token, obtained via <see href="https://t.me/botfather">@Botfather</see>
            </param>
            <param name="currency">
            Three-letter ISO 4217 currency code, see
            <see href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</see>
            </param>
            <param name="prices">
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax,
            bonus, etc.)
            </param>
            <param name="maxTipAmount">
            The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double).
            For example, for a maximum tip of <c>US$ 1.45</c> pass <c><paramref name="maxTipAmount"/> = 145</c>.
            See the <i>exp</i> parameter in
            <see href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</see>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).
            Defaults to 0
            </param>
            <param name="suggestedTipAmounts">
            An array of suggested amounts of tips in the <i>smallest units</i> of the currency (integer,
            <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must
            be positive, passed in a strictly increased order and must not exceed <paramref name="maxTipAmount"/>
            </param>
            <param name="startParameter">
            Unique deep-linking parameter. If left empty, <b>forwarded copies</b> of the sent message will have
            a <i>Pay</i> button, allowing multiple users to pay directly from the forwarded message, using the same
            invoice. If non-empty, forwarded copies of the sent message will have a <i>URL</i> button with a deep
            link to the bot (instead of a <i>Pay</i> button), with the value used as the start parameter
            </param>
            <param name="providerData">
            A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed
            description of required fields should be provided by the payment provide
            </param>
            <param name="photoUrl">
            URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
            People like it better when they see what they are paying for
            </param>
            <param name="photoSize">Photo size</param>
            <param name="photoWidth">Photo width</param>
            <param name="photoHeight">Photo height</param>
            <param name="needName">Pass <c>true</c>, if you require the user's full name to complete the order</param>
            <param name="needPhoneNumber">
            Pass <c>true</c>, if you require the user's phone number to complete the order
            </param>
            <param name="needEmail">Pass <c>true</c>, if you require the user's email to complete the order</param>
            <param name="needShippingAddress">
            Pass <c>true</c>, if you require the user's shipping address to complete the order
            </param>
            <param name="sendPhoneNumberToProvider">
            Pass <c>true</c>, if user's phone number should be sent to provider
            </param>
            <param name="sendEmailToProvider">
            Pass <c>true</c>, if user's email address should be sent to provider
            </param>
            <param name="isFlexible">Pass <c>true</c>, if the final price depends on the shipping method</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption},System.Threading.CancellationToken)">
            <summary>
            If you sent an invoice requesting a shipping address and the parameter <c>isFlexible"</c> was specified,
            the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <see cref="P:Telegram.Bot.Types.Update.ShippingQuery"/> field
            to the bot. Use this method to reply to shipping queries
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="shippingOptions">
            Required if ok is <c>true</c>. An array of available shipping options
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            If you sent an invoice requesting a shipping address and the parameter <c>isFlexible"</c> was specified,
            the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <see cref="P:Telegram.Bot.Types.Update.ShippingQuery"/> field
            to the bot. Use this method to indicate failed shipping query
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">
            Required if <see cref="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.Ok"/> is <c>false</c>. Error message in
            human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to
            your desired address is unavailable'). Telegram will display this message to the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerPreCheckoutQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation
            in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <see cref="P:Telegram.Bot.Types.Update.PreCheckoutQuery"/>.
            Use this method to respond to such pre-checkout queries.
            </summary>
            <remarks>
            <b>Note</b>: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerPreCheckoutQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation
            in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <see cref="P:Telegram.Bot.Types.Update.PreCheckoutQuery"/>.
            Use this method to respond to indicate failed pre-checkout query
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">
            Required if <see cref="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.Ok"/> is <c>false</c>. Error message in
            human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry,
            somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment
            details. Please choose a different color or garment!"). Telegram will display this message to the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendGameAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send a game.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="gameShortName">
            Short name of the game, serves as the unique identifier for the game. Set up your games via
            <see href="https://t.me/botfather">@Botfather</see>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="allowSendingWithoutReply">
            Pass <c>true</c>, if the message should be sent even if the specified replied-to message is not found
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScoreAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int64,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to set the score of the specified user in a game.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="force">
            Pass <c>true</c>, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters
            </param>
            <param name="disableEditMessage">
            Pass <c>true</c>, if the game message should not be automatically edited to include the current scoreboard
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success returns the edited <see cref="T:Telegram.Bot.Types.Message"/>. Returns an error, if the new score is not greater
            than the user's current score in the chat and <paramref name="force"/> is <c>false</c>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScoreAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Use this method to set the score of the specified user in a game.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="inlineMessageId">Identifier of the inline message.</param>
            <param name="force">
            Pass <c>true</c>, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters
            </param>
            <param name="disableEditMessage">
            Pass <c>true</c>, if the game message should not be automatically edited to include the current scoreboard
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns an error, if the new score is not greater than the user's current score in the chat and
            <paramref name="force"/> is <c>false</c>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScoresAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to get data for high score tables. Will return the score of the specified user and
            several of their neighbors in a game.
            </summary>
            <remarks>
            This method will currently return scores for the target user, plus two of their closest neighbors on
            each side. Will also return the top three users if the user and his neighbors are not among them.
            Please note that this behavior is subject to change.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Target user id</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScoresAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get data for high score tables. Will return the score of the specified user and
            several of their neighbors in a game.
            </summary>
            <remarks>
            This method will currently return scores for the target user, plus two of their closest neighbors
            on each side. Will also return the top three users if the user and his neighbors are not among them.
            Please note that this behavior is subject to change.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="T:Telegram.Bot.Types.Animation">
            <summary>
            This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Width">
            <summary>
            Video width as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Height">
            <summary>
            Video height as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Duration">
            <summary>
            Duration of the video in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Thumb">
            <summary>
            Optional. Animation thumbnail as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.FileName">
            <summary>
            Optional. Original animation filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ApiResponse`1">
            <summary>
            Represents bot API response
            </summary>
            <typeparam name="TResult">Expected type of operation result</typeparam>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Ok">
            <summary>
            Gets a value indicating whether the request was successful.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Description">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Parameters">
            <summary>
            Contains information about why a request was unsuccessful.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Result">
            <summary>
            Gets the result object.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ApiResponse`1.#ctor(System.Boolean,`0,System.Int32,System.String,Telegram.Bot.Types.ResponseParameters)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Types.ApiResponse`1"/>
            </summary>
            <param name="ok">Indicating whether the request was successful</param>
            <param name="result">Result object</param>
            <param name="errorCode">Error code</param>
            <param name="description">Error message</param>
            <param name="parameters">Information about why a request was unsuccessful</param>
        </member>
        <member name="T:Telegram.Bot.Types.Audio">
            <summary>
            This object represents an audio file to be treated as music by the Telegram clients.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Duration">
            <summary>
            Duration of the audio in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Performer">
            <summary>
            Optional. Performer of the audio as defined by sender or by audio tags
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Title">
            <summary>
            Optional. Title of the audio as defined by sender or by audio tags
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.FileName">
            <summary>
            Optional. Original filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Thumb">
            <summary>
            Optional. Thumbnail of the album cover to which the music file belongs
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommand">
            <summary>
            This object represents a bot command
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommand.Command">
            <summary>
            Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommand.Description">
            <summary>
            Description of the command, 3-256 characters.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScope">
            <summary>
            This object represents the scope to which bot commands are applied
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScope.Type">
            <summary>
            Scope type
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.Default">
            <summary>
            Create a default <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllPrivateChats">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all private chats
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllGroupChats">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all group chats
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllChatAdministrators">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all chat administrators
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for a specific <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/>
            </summary>
            <param name="chatId">
            Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.ChatAdministrators(Telegram.Bot.Types.ChatId)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for a specific member in a specific <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/>
            </summary>
            <param name="chatId">
            Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.ChatMember(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering a specific member of a group or supergroup chat.
            </summary>
            <param name="chatId">
            Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeDefault">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Default"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeDefault.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllPrivateChats">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllPrivateChats"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllPrivateChats.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllGroupChats">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllGroupChats"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllGroupChats.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllChatAdministrators"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChat">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChat.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChat.ChatId">
            <summary>
            Unique identifier for the target <see cref="T:Telegram.Bot.Types.Chat"/> or username of the target supergroup
            (in the format @supergroupusername)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChatAdministrators">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatAdministrators"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatAdministrators.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatAdministrators.ChatId">
            <summary>
            Unique identifier for the target <see cref="T:Telegram.Bot.Types.Chat"/> or username of the target supergroup
            (in the format @supergroupusername)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChatMember">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatMember"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.ChatId">
            <summary>
            Unique identifier for the target <see cref="T:Telegram.Bot.Types.Chat"/> or username of the target supergroup
            (in the format @supergroupusername)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.UserId">
            <summary>
            Unique identifier of the target user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.CallbackGame">
            <summary>
            A placeholder, currently holds no information. Use <see href="https://t.me/botfather">@BotFather</see> to set up your game.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.CallbackQuery">
            <summary>
            This object represents an incoming callback query from a callback button in an
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">inline keyboard</see>. If the button that originated the query was attached to
            a message sent by the bot, the field <see cref="P:Telegram.Bot.Types.CallbackQuery.Message"/> will be present. If the button was attached to a
            message sent via the bot (in inline mode), the field <see cref="P:Telegram.Bot.Types.CallbackQuery.InlineMessageId"/> will be present. Exactly one
            of the fields data or <see cref="P:Telegram.Bot.Types.CallbackQuery.GameShortName"/> will be present.
            </summary>
            <remarks>
            <b>NOTE:</b> After the user presses a callback button, Telegram clients will display a progress bar until
            you call <see cref="T:Telegram.Bot.Requests.AnswerCallbackQueryRequest"/>. It is, therefore, necessary to react by calling
            <see cref="T:Telegram.Bot.Requests.AnswerCallbackQueryRequest"/> even if no notification to the user is needed (e.g., without
            specifying any of the optional parameters).
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Id">
            <summary>
            Unique identifier for this query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.From">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Message">
            <summary>
            Optional. Description with the callback button that originated the query. Note that message content and
            message date will not be available if the message is too old
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.InlineMessageId">
            <summary>
            Optional. Identifier of the message sent via the bot in inline mode, that originated the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.ChatInstance">
            <summary>
            Global identifier, uniquely corresponding to the chat to which the message with the callback button was
            sent. Useful for high scores in games.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Data">
            <summary>
            Optional. Data associated with the callback button.
            </summary>
            <remarks>
            Be aware that a bad client can send arbitrary data in this field.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.GameShortName">
            <summary>
            Optional. Short name of a <see cref="T:Telegram.Bot.Types.Game"/> to be returned, serves as the unique identifier for the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.IsGameQuery">
            <summary>
            Indicates if the User requests a Game
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Chat">
            <summary>
            This object represents a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Id">
            <summary>
            Unique identifier for this chat. This number may have more
            than 32 significant bits and some programming languages may have
            difficulty/silent defects in interpreting it. But it has
            at most 52 significant bits, so a signed 64-bit integer
            or double-precision float type are safe for storing this identifier.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Type">
            <summary>
            Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Title">
            <summary>
            Optional. Title, for supergroups, channels and group chats
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Username">
            <summary>
            Optional. Username, for private chats, supergroups and channels if available
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.FirstName">
            <summary>
            Optional. First name of the other party in a private chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.LastName">
            <summary>
            Optional. Last name of the other party in a private chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Photo">
            <summary>
            Optional. Chat photo. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Bio">
            <summary>
            Optional. Bio of the other party in a private chat. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Description">
            <summary>
            Optional. Description, for groups, supergroups and channel chats. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.InviteLink">
            <summary>
            Optional. Primary invite link, for groups, supergroups and channel chats. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.PinnedMessage">
            <summary>
            Optional. The most recent pinned message (by sending date). Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Permissions">
            <summary>
            Optional. Default chat member permissions, for groups and supergroups. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.SlowModeDelay">
            <summary>
            Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.StickerSetName">
            <summary>
            Optional. For supergroups, name of group sticker set. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.CanSetStickerSet">
            <summary>
            Optional. True, if the bot can change the group sticker set. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.LinkedChatId">
            <summary>
            Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Location">
            <summary>
            Optional. For supergroups, the location to which the supergroup is connected. Returned only in <see cref="T:Telegram.Bot.Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatId">
            <summary>
            Represents a ChatId
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatId.Identifier">
            <summary>
            Unique identifier for the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatId.Username">
            <summary>
            Username of the channel (in the format @channelusername)
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.#ctor(System.Int64)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using an identifier
            </summary>
            <param name="identifier">The Identifier</param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using an user name
            </summary>
            <param name="username">The user name</param>
            <exception cref="T:System.ArgumentException">
            Thrown when string value isn`t number and doesn't start with @
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when string value is <c>null</c></exception>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.Equals(Telegram.Bot.Types.ChatId)">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.GetHashCode">
            <summary>
            Gets the hash code of this object
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.ToString">
            <summary>
            Create a <c>string</c> out of a <see cref="T:Telegram.Bot.Types.ChatId"/>
            </summary>
            <returns>The <see cref="T:Telegram.Bot.Types.ChatId"/> as <c>string</c></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(System.Int64)~Telegram.Bot.Types.ChatId">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> out of an identifier
            </summary>
            <param name="identifier">The identifier</param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(System.String)~Telegram.Bot.Types.ChatId">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> out of an user name
            </summary>
            <param name="username">The user name</param>
            <exception cref="T:System.ArgumentException">
            Thrown when string value isn`t number and doesn't start with @
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when string value is <c>null</c></exception>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(Telegram.Bot.Types.ChatId)~System.String">
            <summary>
            Create a <c>string</c> out of a <see cref="T:Telegram.Bot.Types.ChatId"/>
            </summary>
            <param name="chatId">The <see cref="T:Telegram.Bot.Types.ChatId"/>The ChatId</param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(Telegram.Bot.Types.Chat)~Telegram.Bot.Types.ChatId">
            <summary>
            Convert a Chat Object to a <see cref="T:Telegram.Bot.Types.ChatId"/>
            </summary>
            <param name="chat"></param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Equality(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId)">
            <summary>
            Compares two ChatId objects
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Inequality(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId)">
            <summary>
            Compares two ChatId objects
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="T:Telegram.Bot.Types.ChatInviteLink">
            <summary>
            Represents an invite link for a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.InviteLink">
            <summary>
            The invite link. If the link was created by another chat administrator, then the second part of the
            link will be replaced with “…”.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.Creator">
            <summary>
            Creator of the link
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.CreatesJoinRequest">
            <summary>
            <c>true</c>, if users joining the chat via the link need to be approved by chat administrators
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.IsPrimary">
            <summary>
            <c>true</c>, if the link is primary
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.IsRevoked">
            <summary>
            <c>true</c>, if the link is revoked
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.Name">
            <summary>
            Optional. Invite link name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.ExpireDate">
            <summary>
            Optional. Point in time when the link will expire or has been expired
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.MemberLimit">
            <summary>
            Optional. Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.PendingJoinRequestCount">
            <summary>
            Optional. Number of pending join requests created using this link
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatJoinRequest">
            <summary>
            Represents a join request sent to a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Chat">
            <summary>
            Chat to which the request was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.From">
            <summary>
            User that sent the join request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Date">
            <summary>
            Date the request was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Bio">
            <summary>
            Optional. Bio of the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.InviteLink">
            <summary>
            Optional. Chat invite link that was used by the user to send the join request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatLocation">
            <summary>
            Represents a location to which a chat is connected.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatLocation.Location">
            <summary>
            The location to which the supergroup is connected. Can't be a live location.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatLocation.Address">
            <summary>
            Location address; 1-64 characters, as defined by the chat owner
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMember">
            <summary>
            This object contains information about one member of the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.Status">
            <summary>
            The member's status in the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.User">
            <summary>
            Information about the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberOwner">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that owns the chat and has all administrator privileges
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.CustomTitle">
            <summary>
            Custom title for this user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.IsAnonymous">
            <summary>
            True, if the user's presence in the chat is hidden
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberAdministrator">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that has some additional privileges
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanBeEdited">
            <summary>
            <c>true</c>, if the bot is allowed to edit administrator privileges of that user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CustomTitle">
            <summary>
            Custom title for this user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.IsAnonymous">
            <summary>
            <c>true</c>, if the user's presence in the chat is hidden
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageChat">
            <summary>
            <c>true</c>, if the administrator can access the chat event log, chat statistics, message statistics
            in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
            Implied by any other administrator privilege
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPostMessages">
            <summary>
            <c>true</c>, if the administrator can post in the channel, channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages">
            <summary>
            <c>true</c>, if the administrator can edit messages of other users, channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanDeleteMessages">
            <summary>
            <c>true</c>, if the administrator can delete messages of other users
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageVoiceChats">
            <summary>
            <c>true</c>, if the administrator can manage voice chats
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanRestrictMembers">
            <summary>
            <c>true</c>, if the administrator can restrict, ban or unban chat members
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPromoteMembers">
            <summary>
            <c>true</c>, if the administrator can add new administrators with a subset of his own privileges or
            demote administrators that he has promoted, directly or indirectly (promoted by administrators that
            were appointed by the user)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanChangeInfo">
            <summary>
            <c>true</c>, if the administrator can change the chat title, photo and other settings
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanInviteUsers">
            <summary>
            <c>true</c>, if the administrator can invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages">
            <summary>
            <c>true</c>, if the administrator can pin messages, supergroups only
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberMember">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that has no additional privileges or restrictions.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberMember.Status">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberRestricted">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that is under certain restrictions in the chat. Supergroups only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.IsMember">
            <summary>
            <c>true</c>, if the user is a member of the chat at the moment of the request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanChangeInfo">
            <summary>
            <c>true</c>, if the user can change the chat title, photo and other settings
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanInviteUsers">
            <summary>
            <c>true</c>, if the user can invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanPinMessages">
            <summary>
            <c>true</c>, if the user can pin messages, supergroups only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendMessages">
            <summary>
            <c>true</c>, if the user can send text messages, contacts, locations and venues
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendMediaMessages">
            <summary>
            <c>true</c>, if the user can send audios, documents, photos, videos, video notes and voice notes,
            implies <see cref="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendPolls">
            <summary>
            <c>true</c>, if the user is allowed to send polls
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendOtherMessages">
            <summary>
            <c>true</c>, if the user can send animations, games, stickers and use inline bots,
            implies <see cref="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendMediaMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanAddWebPagePreviews">
            <summary>
            <c>true</c>, if user may add web page previews to his messages,
            implies <see cref="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendMediaMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.UntilDate">
            <summary>
            Date when restrictions will be lifted for this user, UTC time
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberLeft">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that isn't currently a member of the chat, but may join it themselves
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberLeft.Status">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberBanned">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that was banned in the chat and can't return to the chat
            or view chat messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberBanned.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberBanned.UntilDate">
            <summary>
            Date when restrictions will be lifted for this user, UTC time
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberUpdated">
            <summary>
            This object represents changes in the status of a chat member.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.Chat">
            <summary>
            Chat the user belongs to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.From">
            <summary>
            Performer of the action, which resulted in the change
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.Date">
            <summary>
            Date the change was done
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.OldChatMember">
            <summary>
            Previous information about the chat member
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.NewChatMember">
            <summary>
            New information about the chat member
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.InviteLink">
            <summary>
            Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link
            events only.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatPermissions">
            <summary>
            Describes actions that a non-administrator user is allowed to take in a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages">
            <summary>
            Optional. True, if the user is allowed to send text messages, contacts, locations and venues
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendMediaMessages">
            <summary>
            Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendPolls">
            <summary>
            Optional. True, if the user is allowed to send polls, implies <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendOtherMessages">
            <summary>
            Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMediaMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanAddWebPagePreviews">
            <summary>
            Optional. True, if the user is allowed to add web page previews to their messages, implies <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMediaMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanChangeInfo">
            <summary>
            Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers">
            <summary>
            Optional. True, if the user is allowed to invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanPinMessages">
            <summary>
            Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatPhoto">
            <summary>
            Collection of fileIds of profile pictures of a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.SmallFileId">
            <summary>
            File identifier of small (160x160) chat photo. This FileId can be used only for photo download and only
            for as long as the photo is not changed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.SmallFileUniqueId">
            <summary>
            Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for
            different bots. Can't be used to download or reuse the file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.BigFileId">
            <summary>
            File identifier of big (640x640) chat photo. This FileId can be used only for photo download and only for
            as long as the photo is not changed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.BigFileUniqueId">
            <summary>
            Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for
            different bots. Can't be used to download or reuse the file.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChosenInlineResult">
            <summary>
            This object represents a result of an <see cref="T:Telegram.Bot.Types.InlineQuery"/> that was chosen by the <see cref="T:Telegram.Bot.Types.User"/>
            and sent to their chat partner.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.ResultId">
            <summary>
            The unique identifier for the result that was chosen.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.From">
            <summary>
            The user that chose the result.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Location">
            <summary>
            Optional. Sender location, only for bots that require user location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.InlineMessageId">
            <summary>
            Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached
            to the message. Will be also received in callback queries and can be used to edit the message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Query">
            <summary>
            The query that was used to obtain the result.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Contact">
            <summary>
            This object represents a phone contact.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.UserId">
            <summary>
            Optional. Contact's user identifier in Telegram
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.Vcard">
            <summary>
            Optional. Additional data about the contact in the form of a vCard
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Dice">
            <summary>
            This object represents a dice with random value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Dice.Emoji">
            <summary>
            Emoji on which the dice throw animation is based
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Dice.Value">
            <summary>
            Value of the dice, 1-6 for <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice" /> (“🎲”),
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts" /> (“🎯”) and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/> ("🎳"), 1-5 for <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball" /> (“🏀”) and
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football" />("⚽"), and values 1-64 for <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine" /> ("🎰"). Defaults to
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice" /> (“🎲”)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Document">
            <summary>
            This object represents a general file (as opposed to <see cref="T:Telegram.Bot.Types.PhotoSize">photos</see>, <see cref="T:Telegram.Bot.Types.Voice">voice messages</see> and <see cref="T:Telegram.Bot.Types.Audio">audio files</see>).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.Thumb">
            <summary>
            Optional. Document thumbnail as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.FileName">
            <summary>
            Optional. Original filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.BotCommandScopeType">
            <summary>
            Scope type
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Default">
            <summary>
            Represents the default <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands. Default commands are used if no
            commands with a narrower <see cref="T:Telegram.Bot.Types.BotCommandScope"/> are specified for the user.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllPrivateChats">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all private chats.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllGroupChats">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all group and supergroup chats.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllChatAdministrators">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all group and supergroup
            chat administrators.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering a specific <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatAdministrators">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all administrators of
            a specific group or supergroup <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatMember">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering a specific member of
            a group or supergroup <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatAction">
            <summary>
            Type of action to broadcast
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.Typing">
            <summary>
            Typing
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.PhotoSize"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideo">
            <summary>
            Recording a <see cref="T:Telegram.Bot.Types.Video"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideo">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.Video"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVoice">
            <summary>
            Recording a <see cref="T:Telegram.Bot.Types.Voice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVoice">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.Voice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadDocument">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.Document"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.FindLocation">
            <summary>
            Finding a <see cref="T:Telegram.Bot.Types.Location"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideoNote">
            <summary>
            Recording a <see cref="T:Telegram.Bot.Types.VideoNote"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideoNote">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.VideoNote"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.ChooseSticker">
            <summary>
            Choosing a <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatMemberStatus">
            <summary>
            ChatMember status
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Creator">
            <summary>
            Creator of the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Administrator">
            <summary>
            Administrator of the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Member">
            <summary>
            Normal member of the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Left">
            <summary>
            A <see cref="T:Telegram.Bot.Types.User"/> who left the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Kicked">
            <summary>
            A <see cref="T:Telegram.Bot.Types.User"/> who was kicked from the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Restricted">
            <summary>
            A <see cref="T:Telegram.Bot.Types.User"/> who is restricted in the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatType">
            <summary>
            Type of the <see cref="T:Telegram.Bot.Types.Chat"/>, from which the inline query was sent
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Private">
            <summary>
            Normal one to one <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Group">
            <summary>
            Normal group chat
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Channel">
            <summary>
            A channel
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Supergroup">
            <summary>
            A supergroup
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Sender">
            <summary>
            “sender” for a private chat with the inline query sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.Emoji">
            <summary>
            Emoji on which the dice throw animation is based
            <remarks>
            This enum is used only in the library APIs and is not present in types that are coming from
            Telegram servers for compatibility reasons
            </remarks>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Dice">
            <summary>
            Dice. Resulting value is 1-6
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Darts">
            <summary>
            Darts. Resulting value is 1-6
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Basketball">
            <summary>
            Basketball. Resulting value is 1-5
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Football">
            <summary>
            Football. Resulting value is 1-5
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine">
            <summary>
            Slot machine. Resulting value is 1-64
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Bowling">
            <summary>
            Bowling. Result value is 1-6
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.FileType">
            <summary>
            Type of a <see cref="T:Telegram.Bot.Types.IInputFile"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Stream">
            <summary>
            FileStream
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Id">
            <summary>
            FileId
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Url">
            <summary>
            File Url
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.InputMediaType">
            <summary>
            Type of the input media
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Photo">
            <summary>
            Photo
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Video">
            <summary>
            Video
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Animation">
            <summary>
            Animation
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MaskPositionPoint">
            <summary>
            The part of the face relative to which the mask should be placed.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Forehead">
            <summary>
            The forehead
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Eyes">
            <summary>
            The eyes
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Mouth">
            <summary>
            The mouth
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Chin">
            <summary>
            The chin
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageEntityType">
            <summary>
            Type of a <see cref="T:Telegram.Bot.Types.MessageEntity"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Mention">
            <summary>
            A mentioned <see cref="T:Telegram.Bot.Types.User"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Hashtag">
            <summary>
            A searchable Hashtag
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.BotCommand">
            <summary>
            A Bot command
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Url">
            <summary>
            An url
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Email">
            <summary>
            An email
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Bold">
            <summary>
            Bold text
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Italic">
            <summary>
            Italic text
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Code">
            <summary>
            Monowidth string
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Pre">
            <summary>
            Monowidth block
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.TextLink">
            <summary>
            Clickable text urls
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.TextMention">
            <summary>
            Mentions for a <see cref="T:Telegram.Bot.Types.User"/> without <see cref="P:Telegram.Bot.Types.User.Username"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.PhoneNumber">
            <summary>
            Phone number
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Cashtag">
            <summary>
            A cashtag (e.g. $EUR, $USD) - $ followed by the short currency code
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Underline">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Strikethrough">
            <summary>
            Strikethrough text
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageType">
            <summary>
            The type of a <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Unknown">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> is unknown
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Text">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains text
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Photo">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.PhotoSize"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Audio">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains an <see cref="T:Telegram.Bot.Types.Audio"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Video">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Video"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Voice">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Voice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Document">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Document"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Sticker">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Location">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Location"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Contact">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Contact"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Venue">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Venue"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Game">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Game"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoNote">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.VideoNote"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Invoice">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Payments.Invoice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.SuccessfulPayment">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="T:Telegram.Bot.Types.Payments.SuccessfulPayment"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.WebsiteConnected">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ConnectedWebsite"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatMembersAdded">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatMembers"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatMemberLeft">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.LeftChatMember"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatTitleChanged">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatTitle"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatPhotoChanged">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatPhoto"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MessagePinned">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.PinnedMessage"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatPhotoDeleted">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.DeleteChatPhoto"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GroupCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GroupChatCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.SupergroupCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.SupergroupChatCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChannelCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ChannelChatCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MigratedToSupergroup">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains non-default <see cref="P:Telegram.Bot.Types.Message.MigrateFromChatId"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MigratedFromGroup">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains non-default <see cref="P:Telegram.Bot.Types.Message.MigrateToChatId"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Poll">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.Poll"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Dice">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.Dice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MessageAutoDeleteTimerChanged">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.MessageAutoDeleteTimerChanged"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ProximityAlertTriggered">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.ProximityAlertTriggered"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VoiceChatScheduled">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.VoiceChatScheduled"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VoiceChatStarted">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.VoiceChatStarted"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VoiceChatEnded">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.VoiceChatEnded"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VoiceChatParticipantsInvited">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.VoiceChatParticipantsInvited"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ParseMode">
            <summary>
            <para>
            Text parsing mode
            </para>
            <para>
            The Bot API supports basic formatting for messages. You can use bold and italic text, as well as inline
            links and pre-formatted code in your bots' messages. Telegram clients will render them accordingly.
            You can use either markdown-style or HTML-style formatting.
            </para>
            </summary>
            <see href="https://core.telegram.org/bots/api#formatting-options"/>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.Markdown">
            <summary>
            Markdown-formatted A <see cref="P:Telegram.Bot.Types.Message.Text"/>
            </summary>
            <remarks>
            This is a legacy mode, retained for backward compatibility
            </remarks>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.Html">
            <summary>
            HTML-formatted <see cref="P:Telegram.Bot.Types.Message.Text"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.MarkdownV2">
            <summary>
            MarkdownV2-formatted <see cref="P:Telegram.Bot.Types.Message.Text"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.PollType">
            <summary>
            <see cref="T:Telegram.Bot.Types.Poll"/> type
            <remarks>
            This enum is used only in the library APIs and is not present in types that are coming from
            Telegram servers for compatibility reasons
            </remarks>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PollType.Regular">
            <summary>
            Regular poll
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PollType.Quiz">
            <summary>
            Quiz
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.UpdateType">
            <summary>
            The type of an <see cref="T:Telegram.Bot.Types.Update"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Unknown">
            <summary>
            Update Type is unknown
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Message">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="T:Telegram.Bot.Types.Message"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.InlineQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="T:Telegram.Bot.Types.InlineQuery"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChosenInlineResult">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="T:Telegram.Bot.Types.ChosenInlineResult"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="T:Telegram.Bot.Types.CallbackQuery"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedMessage">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an edited <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChannelPost">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a channel post <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an edited channel post <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ShippingQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ShippingQuery"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.PreCheckoutQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="F:Telegram.Bot.Types.Enums.UpdateType.PreCheckoutQuery"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Poll">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="F:Telegram.Bot.Types.Enums.UpdateType.Poll"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.PollAnswer">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="F:Telegram.Bot.Types.Enums.UpdateType.PollAnswer"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.MyChatMember">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="F:Telegram.Bot.Types.Enums.UpdateType.MyChatMember"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatJoinRequest">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatJoinRequest"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.File">
            <summary>
            This object represents a file ready to be downloaded. The file can be downloaded via <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.File.FilePath">
            <summary>
            Optional. File path. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/> to get the file.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.FileBase">
            <summary>
            This object represents a file ready to be downloaded. The file can be downloaded via
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>. It is guaranteed that the link will be valid for
            at least 1 hour. When the link expires, a new one can be requested by calling
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileId">
            <summary>
            Identifier for this file, which can be used to download or reuse the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileUniqueId">
            <summary>
            Unique identifier for this file, which is supposed to be the same over time and for different bots.
            Can't be used to download or reuse the file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileSize">
            <summary>
            Optional. File size
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Game">
            <summary>
            This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Title">
            <summary>
            Title of the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Description">
            <summary>
            Description of the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Photo">
            <summary>
            Photo that will be displayed in the game message in chats.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Text">
            <summary>
            Optional. Brief description of the game or high scores included in the game message. Can be automatically
            edited to include current high scores for the game when the bot calls
            <see cref="T:Telegram.Bot.Requests.SetGameScoreRequest"/>, or manually edited using
            <see cref="T:Telegram.Bot.Requests.EditMessageTextRequest"/>. 0-4096 characters.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.TextEntities">
            <summary>
            Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Animation">
            <summary>
            Optional. Animation that will be displayed in the game message in chats. Upload via
            <see href="https://t.me/botfather">@BotFather</see>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.GameHighScore">
            <summary>
            This object represents one row of the high scores table for a game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.Position">
            <summary>
            Position in high score table for the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.User">
            <summary>
            User
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.Score">
            <summary>
            Score
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQuery">
            <summary>
            This object represents an incoming inline query. When the user sends an empty query, your bot could return
            some default or trending results.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Id">
            <summary>
            Unique identifier for this query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.From">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Query">
            <summary>
            Text of the query (up to 256 characters)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Offset">
            <summary>
            Offset of the results to be returned, can be controlled by the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.ChatType">
            <summary>
            Optional. Type of the chat, from which the inline query was sent. Can be either  <see cref="F:Telegram.Bot.Types.Enums.ChatType.Sender"/> for
            a private chat with the inline query sender, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Private"/>, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Group"/>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatType.Supergroup"/>, or <see cref="F:Telegram.Bot.Types.Enums.ChatType.Channel"/>. The chat type should be always known for requests
            sent from official clients and most third-party clients, unless the request was sent from a secret chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Location">
            <summary>
            Optional. Sender location, only for bots that request user location
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent">
            <summary>
            Content of the message to be sent instead of the result
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption">
            <summary>
            Caption of the result to be sent, 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode">
            <summary>
            Mode for parsing entities in the result caption. See
            <see href="https://core.telegram.org/bots/api#formatting-options">formatting options</see>
            for more details.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities">
            <summary>
            List of special entities that appear in the caption, which can be specified
            instead of <see cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Latitude">
            <summary>
            Location latitude in degrees
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Longitude">
            <summary>
            Location longitude in degrees
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbWidth">
            <summary>
            Thumbnail width
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbHeight">
            <summary>
            Thumbnail height
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbUrl">
            <summary>
            Url of the thumbnail for the result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult">
            <summary>
            Base Class for inline results send in response to an <see cref="T:Telegram.Bot.Types.InlineQuery"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Type">
            <summary>
            Type of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Id">
            <summary>
            Unique identifier for this result, 1-64 Bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.ReplyMarkup">
            <summary>
            Optional. Inline keyboard attached to the message
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.#ctor(System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier for this result, 1-64 Bytes</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle">
            <summary>
            Represents a link to an article or web page.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Type">
            <summary>
            Type of the result, must be article
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Title">
            <summary>
            Title of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.InputMessageContent">
            <summary>
            Content of the message to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Url">
            <summary>
            Optional. URL of the result.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.HideUrl">
            <summary>
            Optional. Pass <c>true</c>, if you don't want the URL to be shown in the message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Description">
            <summary>
            Optional. Short description of the result.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.#ctor(System.String,System.String,Telegram.Bot.Types.InlineQueryResults.InputMessageContent)">
            <summary>
            Initializes a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/> object
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="title">Title of the result</param>
            <param name="inputMessageContent">Content of the message to be sent</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio">
            <summary>
            Represents a link to an MP3 audio file. By default, this audio file will be sent by the user.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.InputMessageContent"/> to send
            a message with the specified content instead of the audio.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Type">
            <summary>
            Type of the result, must be audio
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.AudioUrl">
            <summary>
            A valid URL for the audio file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Performer">
            <summary>
            Optional. Performer
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.AudioDuration">
            <summary>
            Optional. Audio duration in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="audioUrl">A valid URL for the audio file</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio">
            <summary>
            Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio
            file will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.InputMessageContent"/> to send a message with the
            specified content instead of the audio.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.Type">
            <summary>
            Type of the result, must be audio
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.AudioFileId">
            <summary>
            A valid file identifier for the audio file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="audioFileId">A valid file identifier for the audio file</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument">
            <summary>
            Represents a link to a file stored on the Telegram servers. By default, this file will be sent
            by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.InputMessageContent"/> to send a message with the
            specified content instead of the file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Type">
            <summary>
            Type of the result, must be document
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.DocumentFileId">
            <summary>
            A valid file identifier for the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="documentFileId">A valid file identifier for the file</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif">
            <summary>
            Represents a link to an animated GIF file stored on the Telegram servers. By default, this
            animated GIF file will be sent by the user with an optional caption. Alternatively, you can
            use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.InputMessageContent"/> to send a message with
            specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Type">
            <summary>
            Type of the result, must be gif
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.GifFileId">
            <summary>
            A valid file identifier for the GIF file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="gifFileId">A valid file identifier for the GIF file</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif">
            <summary>
            Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the
            Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an
            optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.InputMessageContent"/> to send a message with
            the specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Type">
            <summary>
            Type of the result, must be mpeg4_gif
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Mpeg4FileId">
            <summary>
            A valid file identifier for the MP4 file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="mpeg4FileId">A valid file identifier for the MP4 file</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto">
            <summary>
            Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent
            by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.InputMessageContent"/> to send a message with the
            specified content instead of the photo.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Type">
            <summary>
            Type of the result, must be photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.PhotoFileId">
            <summary>
            A valid file identifier of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="photoFileId">A valid file identifier of the photo</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker">
            <summary>
            Represents a link to a sticker stored on the Telegram servers. By default, this sticker will
            be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.InputMessageContent"/> to send a message with
            the specified content instead of the sticker.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.Type">
            <summary>
            Type of the result, must be sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.StickerFileId">
            <summary>
            A valid file identifier of the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="stickerFileId">A valid file identifier of the sticker</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo">
            <summary>
            Represents a link to a video file stored on the Telegram servers. By default, this video file will
            be sent by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.InputMessageContent"/> to send a message with
            the specified content instead of the video.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Type">
            <summary>
            Type of the result, must be video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.VideoFileId">
            <summary>
            A valid file identifier for the video file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="videoFileId">A valid file identifier for the video file</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice">
            <summary>
            Represents a link to a voice message stored on the Telegram servers. By default, this voice
            message will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.InputMessageContent"/> to send a message
            with the specified content instead of the voice message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Type">
            <summary>
            Type of the result, must be voice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.VoiceFileId">
            <summary>
            A valid file identifier for the voice message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Title">
            <summary>
            Voice message title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="fileId">A valid file identifier for the voice message</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact">
            <summary>
            Represents a contact with a phone number. By default, this contact will be sent by the user.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.InputMessageContent"/> to send
            a message with the specified content instead of the contact.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.Type">
            <summary>
            Type of the result, must be contact
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.Vcard">
            <summary>
            Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument">
            <summary>
            Represents a link to a file. By default, this file will be sent by the user with an optional caption.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.InputMessageContent"/> to send
            a message with the specified content instead of the file. Currently, only .PDF and .ZIP files
            can be sent using this method.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Type">
            <summary>
            Type of the result, must be document
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.DocumentUrl">
            <summary>
            A valid URL for the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.MimeType">
            <summary>
            Mime type of the content of the file, either “application/pdf” or “application/zip”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="documentUrl">A valid URL for the file</param>
            <param name="title">Title of the result</param>
            <param name="mimeType">
            Mime type of the content of the file, either “application/pdf” or “application/zip”
            </param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.Game"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.Type">
            <summary>
            Type of the result, must be game
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.GameShortName">
            <summary>
            Short name of the game
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="gameShortName">Short name of the game</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif">
            <summary>
            Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the
            user with optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.InputMessageContent"/> to send a message with the
            specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Type">
            <summary>
            Type of the result, must be gif
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifUrl">
            <summary>
            A valid URL for the GIF file. File size must not exceed 1MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifWidth">
            <summary>
            Optional. Width of the GIF.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifHeight">
            <summary>
            Optional. Height of the GIF.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifDuration">
            <summary>
            Optional. Duration of the GIF.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ThumbUrl">
            <summary>
            URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ThumbMimeType">
            <summary>
            Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”,
            or “video/mp4”. Defaults to “image/jpeg”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="gifUrl">Width of the GIF</param>
            <param name="thumbUrl">Url of the thumbnail for the result.</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation">
            <summary>
            Represents a location on a map. By default, the location will be sent by the user. Alternatively,
            you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.InputMessageContent"/> to send a message with
            the specified content instead of the location.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Type">
            <summary>
            Type of the result, must be location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Latitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Latitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Longitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Longitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Title">
            <summary>
            Location title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.HorizontalAccuracy">
            <summary>
            Optional. The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.LivePeriod">
            <summary>
            Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Heading">
            <summary>
            Optional. For live locations, a direction in which the user is moving, in degrees.
            Must be between 1 and 360 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ProximityAlertRadius">
            <summary>
            Optional. For live locations, a maximum distance for proximity alerts about approaching
            another chat member, in meters. Must be between 1 and 100000 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.#ctor(System.String,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="latitude">Latitude of the location in degrees</param>
            <param name="longitude">Longitude of the location in degrees</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif">
            <summary>
            Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this
            animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.InputMessageContent"/> to send a message with the specified
            content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Type">
            <summary>
            Type of the result, must be mpeg4_gif
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Url">
            <summary>
            A valid URL for the MP4 file. File size must not exceed 1MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Width">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Height">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Duration">
            <summary>
            Optional. Video duration
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ThumbUrl">
            <summary>
            URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ThumbMimeType">
            <summary>
            Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”,
            or “video/mp4”. Defaults to “image/jpeg”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="mpeg4Url">A valid URL for the MP4 file. File size must not exceed 1MB.</param>
            <param name="thumbUrl">Url of the thumbnail for the result.</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto">
            <summary>
            Represents a link to a photo. By default, this photo will be sent by the user with optional caption.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.InputMessageContent"/> to send a message
            with the specified content instead of the photo.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Type">
            <summary>
            Type of the result, must be photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoUrl">
            <summary>
            A valid URL of the photo. Photo must be in <b>jpeg</b> format. Photo size must not exceed 5MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ThumbUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoWidth">
            <summary>
            Optional. Width of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoHeight">
            <summary>
            Optional. Height of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query representing a link to a photo
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="photoUrl">A valid URL of the photo. Photo size must not exceed 5MB.</param>
            <param name="thumbUrl">Optional. Url of the thumbnail for the result.</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType">
            <summary>
            Type of the InlineQueryResult
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Unknown">
            <summary>
            Unknown <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Article">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Photo">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Gif">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Mpeg4Gif">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Video">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/>
            /// <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Audio">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Contact">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Document">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument"/>
            /// <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Location">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Venue">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Voice">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Game">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Sticker">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue">
            <summary>
            Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.InputMessageContent"/> to send a message with the specified
            content instead of the venue.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Type">
            <summary>
            Type of the result, must be venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Latitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Latitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Longitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Longitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Title">
            <summary>
            Title of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue if known
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.FoursquareType">
            <summary>
            Optional. Foursquare type of the venue. (For example, "arts_entertainment/default",
            "arts_entertainment/aquarium" or "food/icecream".)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.GooglePlaceId">
            <summary>
            Google Places identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.GooglePlaceType">
            <summary>
            Google Places type of the venue.
            <see href="https://developers.google.com/places/web-service/supported_types"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.#ctor(System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="latitude">Latitude of the location in degrees</param>
            <param name="longitude">Longitude of the location in degrees</param>
            <param name="title">Title of the result</param>
            <param name="address">Address of the venue</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo">
            <summary>
            Represents a link to a page containing an embedded video player or a video file. By default, this
            video file will be sent by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent"/> to send a message with the specified
            content instead of the video.
            </summary>
            <remarks>
            If an <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/> message contains an embedded video (e.g., YouTube),
            you <b>must</b> replace its content using <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent"/>.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Type">
            <summary>
            Type of the result, must be video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoUrl">
            <summary>
            A valid URL for the embedded video player or video file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.MimeType">
            <summary>
            Mime type of the content of video url, “text/html” or “video/mp4”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ThumbUrl">
            <summary>
            URL of the thumbnail (jpeg only) for the video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoWidth">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoHeight">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoDuration">
            <summary>
            Optional. Video duration in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent">
            <summary>
            Optional. Content of the message to be sent instead of the video. This field is
            <b>required</b> if <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/> is used to send an
            HTML-page as a result (e.g., a YouTube video).
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.#ctor(System.String,System.String,System.String,System.String,Telegram.Bot.Types.InlineQueryResults.InputMessageContent)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="videoUrl">A valid URL for the embedded video player</param>
            <param name="thumbUrl">Url of the thumbnail for the result</param>
            <param name="title">Title of the result</param>
            <param name="inputMessageContent">
            Content of the message to be sent instead of the video. This field is <b>required</b> if
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/> is used to send an HTML-page as a result
            (e.g., a YouTube video).
            </param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice">
            <summary>
            Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this
            voice recording will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.InputMessageContent"/> to send a message with the specified
            content instead of the the voice message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Type">
            <summary>
            Type of the result, must be voice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.VoiceUrl">
            <summary>
            A valid URL for the voice recording
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Title">
            <summary>
            Recording title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.VoiceDuration">
            <summary>
            Optional. Recording duration in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="voiceUrl">A valid URL for the voice recording</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent">
            <summary>
            Represents the content of a contact message to be sent as the result of an <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.Vcard">
            <summary>
            Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new input contact message content
            </summary>
            <param name="phoneNumber">The phone number of the contact</param>
            <param name="firstName">The first name of the contact</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent">
            <summary>
            Represents the content of an invoice message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Title">
            <summary>
            Product name, 1-32 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Description">
            <summary>
            Product description, 1-255 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Payload">
            <summary>
            Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,
            use for your internal processes.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.ProviderToken">
            <summary>
            Payment provider token, obtained via <see href="https://t.me/botfather">@Botfather</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Currency">
            <summary>
            Three-letter ISO 4217 currency code, see
            <see href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Prices">
            <summary>
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost,
            delivery tax, bonus, etc.)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.MaxTipAmount">
            <summary>
            Optional. The maximum accepted amount for tips in the smallest units of the currency
            (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass
            max_tip_amount = 145. See the exp parameter in
            <see href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</see>,
            it shows the number of digits past the decimal point for each currency (2 for the
            majority of currencies). Defaults to 0
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SuggestedTipAmounts">
            <summary>
            Optional. An array of suggested amounts of tip in the smallest units of the currency
            (integer, not float/double). At most 4 suggested tip amounts can be specified. The
            suggested tip amounts must be positive, passed in a strictly increased order and
            must not exceed <see cref="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.MaxTipAmount"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.ProviderData">
            <summary>
            Optional. A JSON-serialized object for data about the invoice, which will be shared with
            the payment provider. A detailed description of the required fields should be provided by
            the payment provider.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoUrl">
            <summary>
            Optional. URL of the product photo for the invoice. Can be a photo of the goods or a
            marketing image for a service. People like it better when they see what they are paying for.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoSize">
            <summary>
            Optional. Photo size
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoWidth">
            <summary>
            Optional. Photo width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoHeight">
            <summary>
            Optional. Photo height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedName">
            <summary>
            Optional. Pass True, if you require the user's full name to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedPhoneNumber">
            <summary>
            Optional. Pass True, if you require the user's phone number to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedEmail">
            <summary>
            Optional. Pass True, if you require the user's email address to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedShippingAddress">
            <summary>
            Optional. Pass True, if you require the user's shipping address to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SendPhoneNumberToProvider">
            <summary>
            Optional. Pass True, if user's phone number should be sent to provider
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SendEmailToProvider">
            <summary>
            Optional. Pass True, if user's email address should be sent to provider
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.IsFlexible">
            <summary>
            Optional. Pass True, if the final price depends on the shipping method
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice})">
            <summary>
            Initializes with title, description, payload, providerToken, currency and an array of
            <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/>
            </summary>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes</param>
            <param name="providerToken">Payments provider token, obtained via BotFather</param>
            <param name="currency">Three-letter ISO 4217 currency code</param>
            <param name="prices">
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost,
            delivery tax, bonus, etc.)
            </param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent">
            <summary>
            Represents the content of a location message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Latitude">
            <summary>
            Latitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Longitude">
            <summary>
            Longitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.HorizontalAccuracy">
            <summary>
            Optional. The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.LivePeriod">
            <summary>
            Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Heading">
            <summary>
            Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.ProximityAlertRadius">
            <summary>
            Optional. Maximum distance for proximity alerts about approaching another chat member,
            in meters. For sent live locations only.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new input location message content
            </summary>
            <param name="latitude">The latitude of the location</param>
            <param name="longitude">The longitude of the location</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">
            <summary>
            This object represents the content of a message to be sent as a result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent">
            <summary>
            Represents the content of a text message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.MessageText">
            <summary>
            Text of the message to be sent, 1-4096 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.ParseMode">
            <summary>
            Optional. Mode for
            <see href="https://core.telegram.org/bots/api#formatting-options">parsing entities</see> in the message
            text. See formatting options for more details.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.Entities">
            <summary>
            Optional. List of special entities that appear in message text, which can be specified
            instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.ParseMode"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.DisableWebPagePreview">
            <summary>
            Optional. Disables link previews for links in the sent message
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.#ctor(System.String)">
            <summary>
            Initializes a new input text message content
            </summary>
            <param name="messageText">The text of the message</param>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent">
            <summary>
            Represents the content of a <see cref="T:Telegram.Bot.Types.Venue"/> message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Latitude">
            <summary>
            Latitude of the venue in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Longitude">
            <summary>
            Longitude of the venue in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Title">
            <summary>
            Name of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue, if known
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.FoursquareType">
            <summary>
            Optional. Foursquare type of the venue. (For example, “arts_entertainment/default”,
            “arts_entertainment/aquarium” or “food/icecream”.)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.GooglePlaceId">
            <summary>
            Google Places identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.GooglePlaceType">
            <summary>
            Google Places type of the venue.
            <see href="https://developers.google.com/places/web-service/supported_types"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.#ctor(System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="title">The name of the venue</param>
            <param name="address">The address of the venue</param>
            <param name="latitude">The latitude of the venue</param>
            <param name="longitude">The longitude of the venue</param>
        </member>
        <member name="T:Telegram.Bot.Types.IAlbumInputMedia">
            <summary>
            A marker for input media types that can be used in sendMediaGroup method.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.IInputFile">
            <summary>
            This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in
            the usual way that files are uploaded via the browser
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputFile.FileType">
            <summary>
            Type of file to send
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.IInputMedia">
            <summary>
            A marker interface for input media content
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMedia.Type">
            <summary>
            Type of the media
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMedia.Media">
            <summary>
            Media to send
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMedia.Caption">
            <summary>
            Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMedia.ParseMode">
            <summary>
            Optional. Mode for parsing entities in the photo caption. See <see href="https://core.telegram.org/bots/api#formatting-options">formatting options</see> for more details.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMedia.CaptionEntities">
            <summary>
            Optional. List of special entities that appear in the caption, which can be specified
            instead of <see cref="P:Telegram.Bot.Types.IInputMedia.ParseMode"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.IInputMediaThumb">
            <summary>
            Indicates that an <see cref="T:Telegram.Bot.Types.InputMediaBase"/> has a thumbnail.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMediaThumb.Thumb">
            <summary>
            Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
            server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and
            height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputFiles.InputFileStream">
            <summary>
            Used for sending files to Telegram
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFiles.InputFileStream.FileType">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputFiles.InputFileStream.Content">
            <summary>
            File content to upload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFiles.InputFileStream.FileName">
            <summary>
            Name of a file to upload using multipart/form-data
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputFileStream.#ctor(Telegram.Bot.Types.Enums.FileType)">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputFileStream"/> with a given <see cref="P:Telegram.Bot.Types.InputFiles.InputFileStream.FileType"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputFileStream.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputFileStream"/> from a <see cref="T:System.IO.Stream"/> and a file name
            </summary>
            <param name="content">A <see cref="T:System.IO.Stream"/> containing a file to send</param>
            <param name="fileName">A name of the file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputFileStream.op_Implicit(System.IO.Stream)~Telegram.Bot.Types.InputFiles.InputFileStream">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputFileStream"/> from a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing a file to send</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputFiles.InputOnlineFile">
            <summary>
            Used for sending files to Telegram
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFiles.InputOnlineFile.Url">
            <summary>
            HTTP URL for Telegram to get a file from the Internet
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputOnlineFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputOnlineFile"/> from a <see cref="T:System.IO.Stream"/> and a file name
            </summary>
            <param name="content">A <see cref="T:System.IO.Stream"/> containing a file to send</param>
            <param name="fileName">A name of the file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputOnlineFile.#ctor(System.String)">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputOnlineFile"/> from a string containing a uri or file id
            </summary>
            <param name="value">A <see cref="T:System.String"/> containing a url or file_id</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputOnlineFile.#ctor(System.Uri)">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputOnlineFile"/> from a <see cref="T:System.Uri"/>
            </summary>
            <param name="url">A <see cref="T:System.Uri"/> pointing to a file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputOnlineFile.op_Implicit(System.IO.Stream)~Telegram.Bot.Types.InputFiles.InputOnlineFile">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputOnlineFile"/> from a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing a file to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputOnlineFile.op_Implicit(System.String)~Telegram.Bot.Types.InputFiles.InputOnlineFile">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputOnlineFile"/> from a string containing a uri or file id
            </summary>
            <param name="value">A <see cref="T:System.String"/> containing a url or file_id</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputFiles.InputTelegramFile">
            <summary>
            Used for sending files to Telegram
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFiles.InputTelegramFile.FileId">
            <summary>
            Id of a file that exists on Telegram servers
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputTelegramFile.#ctor(Telegram.Bot.Types.Enums.FileType)">
            <summary>
             Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputTelegramFile"/> with a <see cref="T:Telegram.Bot.Types.Enums.FileType"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputTelegramFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputTelegramFile"/> from a <see cref="T:System.IO.Stream"/> and a file name
            </summary>
            <param name="content">A <see cref="T:System.IO.Stream"/> containing a file to send</param>
            <param name="fileName">A name of the file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputTelegramFile.#ctor(System.String)">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputTelegramFile"/> with a <paramref name="fileId"/>
            </summary>
            <param name="fileId">A file identifier</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputTelegramFile.op_Implicit(System.IO.Stream)~Telegram.Bot.Types.InputFiles.InputTelegramFile">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputTelegramFile"/> from a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing a file to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFiles.InputTelegramFile.op_Implicit(System.String)~Telegram.Bot.Types.InputFiles.InputTelegramFile">
            <summary>
            Constructs an <see cref="T:Telegram.Bot.Types.InputFiles.InputTelegramFile"/> with a <paramref name="fileId"/>
            </summary>
            <param name="fileId">A file identifier</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputMedia">
            <summary>
            Media to send in request that could be a file_id, HTTP url, or a file
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMedia.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes media with a file to send
            </summary>
            <param name="content">File content to upload</param>
            <param name="fileName">Name of the file to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMedia.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMedia"/> with either a file_id or a HTTP URL
            </summary>
            <param name="value">
            file_id to send a file that exists on the Telegram servers or an HTTP URL for Telegram to get a file
            from the Internet
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMedia.op_Implicit(System.String)~Telegram.Bot.Types.InputMedia">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMedia"/> with either a file_id or a HTTP URL
            </summary>
            <param name="value">
            file_id to send a file that exists on the Telegram servers or an HTTP URL for Telegram to get a file
            from the Internet
            </param>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaAnimation">
            <summary>
            Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Thumb">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Width">
            <summary>
            Optional. Animation width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Height">
            <summary>
            Optional. Animation height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Duration">
            <summary>
            Optional. Animation duration
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAnimation.#ctor(Telegram.Bot.Types.InputMedia)">
            <summary>
            Initializes a new animation media to send with an <see cref="T:Telegram.Bot.Types.InputMedia"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaAudio">
            <summary>
            Represents an audio file to be treated as music to be sent.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Thumb">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Duration">
            <summary>
            Optional. Duration of the audio in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Performer">
            <summary>
            Optional. Performer of the audio
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Title">
            <summary>
            Optional. Title of the audio
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAudio.#ctor(Telegram.Bot.Types.InputMedia)">
            <summary>
            Initializes a new audio media to send with an <see cref="T:Telegram.Bot.Types.InputMedia"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaBase">
            <summary>
            This object represents the content of a media message to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaBase.Type">
            <summary>
            Type of the media
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaBase.Media">
            <summary>
            File to send
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaBase.Caption">
            <summary>
            Optional. Caption of the photo to be sent, 0-1024 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaBase.CaptionEntities">
            <summary>
            Optional. List of special entities that appear in the caption, which can be specified instead
            of <see cref="P:Telegram.Bot.Types.InputMediaBase.ParseMode"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaBase.ParseMode">
            <summary>
            Change, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in a caption
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaBase.#ctor(Telegram.Bot.Types.InputMedia)">
            <summary>
            Initialize an object
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaDocument">
            <summary>
            Represents a general file to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.Thumb">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.DisableContentTypeDetection">
            <summary>
            Optional. Disables automatic server-side content type detection for files uploaded using
            multipart/form-data. Always true, if the document is sent as part of an album.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaDocument.#ctor(Telegram.Bot.Types.InputMedia)">
            <summary>
            Initializes a new document media to send with an <see cref="T:Telegram.Bot.Types.InputMedia"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaPhoto">
            <summary>
            Represents a photo to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaPhoto.Type">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaPhoto.#ctor(Telegram.Bot.Types.InputMedia)">
            <summary>
            Initializes a new photo media to send with an <see cref="T:Telegram.Bot.Types.InputMedia"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaVideo">
            <summary>
            Represents a video to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Thumb">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Width">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Height">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Duration">
            <summary>
            Optional. Video duration
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.SupportsStreaming">
            <summary>
            Optional. Pass True, if the uploaded video is suitable for streaming
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaVideo.#ctor(Telegram.Bot.Types.InputMedia)">
            <summary>
            Initializes a new video media to send with an <see cref="T:Telegram.Bot.Types.InputMedia"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="T:Telegram.Bot.Types.Location">
            <summary>
            This object represents a point on the map.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Longitude">
            <summary>
            Longitude as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Latitude">
            <summary>
            Latitude as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.HorizontalAccuracy">
            <summary>
            Optional. The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.LivePeriod">
            <summary>
            Optional. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Heading">
            <summary>
            Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.ProximityAlertRadius">
            <summary>
            Optional. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.LoginUrl">
            <summary>
            This object represents a parameter of the inline keyboard button used to automatically authorize a user.
            Serves as a great replacement for the
            <see href="https://core.telegram.org/widgets/login">Telegram Login Widget</see> when the user is coming from
            Telegram. All the user needs to do is tap/click a button and confirm that they want to log in.
            <para>
            Telegram apps support these buttons as of
            <see href="https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots">version 5.7</see>.
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.Url">
            <summary>
            An HTTP URL to be opened with user authorization data added to the query string when the button is pressed.
            If the user refuses to provide authorization data, the original URL without information about the user will
            be opened. The data added is the same as described in
            <see href="https://core.telegram.org/widgets/login#receiving-authorization-data">
            Receiving authorization data
            </see>.
            <para>
            <b>NOTE:</b> You <b>must</b> always check the hash of the received data to verify the authentication and
            the integrity of the data as described in
            <see href="https://core.telegram.org/widgets/login#checking-authorization">Checking authorization</see>.
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.ForwardText">
            <summary>
            Optional. New text of the button in forwarded messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.BotUsername">
            <summary>
            Optional. Username of a bot, which will be used for user authorization. See
            <see href="https://core.telegram.org/widgets/login#setting-up-a-bot">Setting up a bot</see> for more
            details. If not specified, the current bot's username will be assumed. The url's domain must be the same
            as the domain linked with the bot. See
            <see href="https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot">
            Linking your domain to the bot</see> for more details.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.RequestWriteAccess">
            <summary>
            Optional. Pass True to request the permission for your bot to send messages to the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MaskPosition">
            <summary>
            This object describes the position on faces where a mask should be placed by default.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.Point">
            <summary>
            The part of the face relative to which the mask should be placed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.XShift">
            <summary>
            Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.YShift">
            <summary>
            Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.Scale">
            <summary>
            Mask scaling coefficient. For example, 2.0 means double size.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Message">
            <summary>
            This object represents a message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageId">
            <summary>
            Unique message identifier inside this chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.From">
            <summary>
            Optional. Sender, empty for messages sent to channels
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SenderChat">
            <summary>
            Optional. Sender of the message, sent on behalf of a chat. The channel itself for channel messages.
            The supergroup itself for messages from anonymous group administrators. The linked channel for messages
            automatically forwarded to the discussion group
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Date">
            <summary>
            Date the message was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Chat">
            <summary>
            Conversation the message belongs to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFrom">
            <summary>
            Optional. For forwarded messages, sender of the original message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFromChat">
            <summary>
            Optional. For messages forwarded from channels or from anonymous administrators, information about the
            original sender chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFromMessageId">
            <summary>
            Optional. For messages forwarded from channels, identifier of the original message in the channel
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardSignature">
            <summary>
            Optional. For messages forwarded from channels, signature of the post author if present
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardSenderName">
            <summary>
            Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in
            forwarded messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardDate">
            <summary>
            Optional. For forwarded messages, date the original message was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyToMessage">
            <summary>
            Optional. For replies, the original message. Note that the <see cref="T:Telegram.Bot.Types.Message"/> object in this field
            will not contain further <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> fields even if it itself is a reply.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ViaBot">
            <summary>
            Optional. Bot through which the message was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EditDate">
            <summary>
            Optional. Date the message was last edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MediaGroupId">
            <summary>
            Optional. The unique identifier of a media message group this message belongs to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.AuthorSignature">
            <summary>
            Optional. Signature of the post author for messages in channels, or the custom title of an anonymous
            group administrator
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Text">
            <summary>
            Optional. For text messages, the actual text of the message, 0-4096 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Entities">
            <summary>
            Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear
            in the text
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EntityValues">
            <summary>
            Gets the entity values.
            </summary>
            <value>
            The entity contents.
            </value>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Animation">
            <summary>
            Optional. Message is an animation, information about the animation. For backward compatibility, when this
            field is set, the <see cref="P:Telegram.Bot.Types.Message.Document"/> field will also be set
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Audio">
            <summary>
            Optional. Message is an audio file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Document">
            <summary>
            Optional. Message is a general file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Photo">
            <summary>
            Optional. Message is a photo, available sizes of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Sticker">
            <summary>
            Optional. Message is a sticker, information about the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Video">
            <summary>
            Optional. Message is a video, information about the video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoNote">
            <summary>
            Optional. Message is a video note, information about the video message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Voice">
            <summary>
            Optional. Message is a voice message, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Caption">
            <summary>
            Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.CaptionEntities">
            <summary>
            Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that
            appear in the caption
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.CaptionEntityValues">
            <summary>
            Gets the caption entity values.
            </summary>
            <value>
            The caption entity contents.
            </value>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Contact">
            <summary>
            Optional. Message is a shared contact, information about the contact
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Dice">
            <summary>
            Optional. Message is a dice with random value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Game">
             <summary>
            Optional. Message is a game, information about the game
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Poll">
            <summary>
            Optional. Message is a native poll, information about the poll
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Venue">
            <summary>
            Optional. Message is a venue, information about the venue. For backward compatibility, when this field
            is set, the <see cref="P:Telegram.Bot.Types.Message.Location"/> field will also be set
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Location">
            <summary>
            Optional. Message is a shared location, information about the location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatMembers">
            <summary>
            Optional. New members that were added to the group or supergroup and information about them
            (the bot itself may be one of these members)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.LeftChatMember">
            <summary>
            Optional. A member was removed from the group, information about them (this member may be the bot itself)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatTitle">
            <summary>
            Optional. A chat title was changed to this value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatPhoto">
            <summary>
            Optional. A chat photo was change to this value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.DeleteChatPhoto">
            <summary>
            Optional. Service message: the chat photo was deleted
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GroupChatCreated">
            <summary>
            Optional. Service message: the group has been created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SupergroupChatCreated">
            <summary>
            Optional. Service message: the supergroup has been created. This field can't be received in a message
            coming through updates, because bot can't be a member of a supergroup when it is created. It can only be
            found in <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> if someone replies to a very first message in a directly created
            supergroup.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ChannelChatCreated">
            <summary>
            Optional. Service message: the channel has been created. This field can't be received in a message coming
            through updates, because bot can't be a member of a channel when it is created. It can only be found in
            <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> if someone replies to a very first message in a channel.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageAutoDeleteTimerChanged">
            <summary>
            Optional. Service message: auto-delete timer settings changed in the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateToChatId">
            <summary>
            Optional. The group has been migrated to a supergroup with the specified identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateFromChatId">
            <summary>
            Optional. The supergroup has been migrated from a group with the specified identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PinnedMessage">
            <summary>
            Optional. Specified message was pinned. Note that the Message object in this field will not contain
            further <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> fields even if it is itself a reply.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Invoice">
            <summary>
            Optional. Message is an invoice for a
            <see href="https://core.telegram.org/bots/api#payments">payment</see>, information about the invoice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SuccessfulPayment">
            <summary>
            Optional. Message is a service message about a successful payment, information about the payment
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ConnectedWebsite">
            <summary>
            Optional. The domain name of the website on which the user has logged in
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PassportData">
            <summary>
            Optional. Telegram Passport data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ProximityAlertTriggered">
            <summary>
            Optional. Service message. A user in the chat triggered another user's proximity alert while
            sharing Live Location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VoiceChatScheduled">
            <summary>
            Optional. Service message: voice chat scheduled
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VoiceChatStarted">
            <summary>
            Optional. Service message: voice chat started
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VoiceChatEnded">
            <summary>
            Optional. Service message: voice chat ended
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VoiceChatParticipantsInvited">
            <summary>
            Optional. Service message: new participants invited to a voice chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyMarkup">
            <summary>
            Optional. Inline keyboard attached to the message. <see cref="T:Telegram.Bot.Types.LoginUrl"/> buttons are represented as
            ordinary url buttons.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Type">
            <summary>
            Gets the <see cref="T:Telegram.Bot.Types.Enums.MessageType"/> of the <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
            <value>
            The <see cref="T:Telegram.Bot.Types.Enums.MessageType"/> of the <see cref="T:Telegram.Bot.Types.Message"/>
            </value>
        </member>
        <member name="T:Telegram.Bot.Types.MessageAutoDeleteTimerChanged">
            <summary>
            This object represents a service message about a change in auto-delete timer settings.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageAutoDeleteTimerChanged.MessageAutoDeleteTime">
            <summary>
            New auto-delete time for messages in the chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageEntity">
            <summary>
            This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Type">
            <summary>
            Type of the entity
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Offset">
            <summary>
            Offset in UTF-16 code units to the start of the entity
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Length">
            <summary>
            Length of the entity in UTF-16 code units
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Url">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.TextLink"/> only, url that will be opened after user taps on the text
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.User">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.TextMention"/> only, the mentioned user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Language">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Pre"/> only, the programming language of the entity text
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageId">
            <summary>
            This object represents a messageId.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageId.Id">
            <summary>
            Message identifier in the chat specified in <see cref="P:Telegram.Bot.Requests.CopyMessageRequest.FromChatId"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedCredentials">
            <summary>
            Contains data required for decrypting and authenticating <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/>.
            See the <see href="https://core.telegram.org/passport#receiving-information">Telegram Passport
            Documentation</see> for a complete description of the data decryption and authentication processes.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Data">
            <summary>
            Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets
            required for <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/> decryption and authentication.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Hash">
            <summary>
            Base64-encoded data hash for data authentication.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Secret">
            <summary>
            Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedPassportElement">
            <summary>
            Contains information about documents or other Telegram Passport elements shared with the bot by the user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Type">
            <summary>
            Element type. One of <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElementType"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Data">
            <summary>
            Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PersonalDetails"/>, <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/> and <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Address"/>
            types. Can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.PhoneNumber">
            <summary>
            Optional. User's verified phone number, available only for <see cref="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.PhoneNumber"/> type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Email">
            <summary>
            Optional. User's verified email address, available only for <see cref="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Email"/> type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Files">
            <summary>
            Optional. Array of encrypted files with documents provided by the user, available for
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration"/> and <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration"/> types.
            Files can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.FrontSide">
            <summary>
            Optional. Encrypted file with the front side of the document, provided by the user. Available for
            <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/> and
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/>. The file can be decrypted and verified using the accompanying
            <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.ReverseSide">
            <summary>
            Optional. Encrypted file with the reverse side of the document, provided by the user. Available for
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/> and <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/>. The file can be decrypted and verified using
            the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Selfie">
            <summary>
            Optional. Encrypted file with the selfie of the user holding a document, provided by the user;
            available for <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/> and
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/>. The file can be decrypted and verified using the accompanying
            <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Translation">
            <summary>
            Optional. Array of encrypted files with translated versions of documents provided by the user.
            Available if requested for <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration"/> and
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration"/> types. Files can be decrypted and verified using the accompanying
            <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Hash">
            <summary>
            Base64-encoded element hash for using in PassportElementErrorUnspecified
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedPassportElementType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PersonalDetails">
            <summary>
            Personal details
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Passport">
            <summary>
            Passport
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence">
            <summary>
            Driver licence
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard">
            <summary>
            Identity card
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport">
            <summary>
            Internal passport
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill">
            <summary>
            Utility bill
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement">
            <summary>
            Bank statement
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement">
            <summary>
            Rental agreement
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration">
            <summary>
            Passport registration
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration">
            <summary>
            Temporary registration
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PhoneNumber">
            <summary>
            Phone number
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportData">
            <summary>
            Contains information about Telegram Passport data shared with the bot by the user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportData.Data">
            <summary>
            Array with information about documents and other Telegram Passport elements that was shared with the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportData.Credentials">
            <summary>
            Encrypted credentials required to decrypt the data.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportFile">
            <summary>
            This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportFile.FileDate">
            <summary>
            DateTime when the file was uploaded
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.Invoice">
            <summary>
            This object contains basic information about an invoice.
            </summary>
            <seealso href="https://core.telegram.org/bots/api#invoice"/>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Title">
            <summary>
            Product name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Description">
            <summary>
            Product description
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.StartParameter">
            <summary>
            Unique bot deep-linking parameter that can be used to generate this invoice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Currency">
            <summary>
            Three-letter ISO 4217
            <see href="https://core.telegram.org/bots/payments#supported-currencies">currency</see> code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.TotalAmount">
            <summary>
            Total price in the <i>smallest units</i> of the
            <see href="https://core.telegram.org/bots/payments#supported-currencies">currency</see>
            (integer, <b>not</b> float/double).
            <para>
            For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter in
            <see href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</see>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).
            </para>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.LabeledPrice">
            <summary>
            This object represents a portion of the price for goods or services.
            </summary>
            <see href="https://core.telegram.org/bots/api#labeledprice"/>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.LabeledPrice.Label">
            <summary>
            Portion label
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.LabeledPrice.Amount">
            <summary>
            Price of the product in the <i>smallest units</i> of the <see href="https://core.telegram.org/bots/payments#supported-currencies">currency</see> (integer, <b>not</b> float/double).
            <para>For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter in <see href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</see>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</para>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.LabeledPrice.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/>
            </summary>
            <param name="label">Portion label</param>
            <param name="amount">Price of the product</param>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.OrderInfo">
            <summary>
            This object represents information about an order.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.Name">
            <summary>
            Optional. User name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.PhoneNumber">
            <summary>
            Optional. User's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.Email">
            <summary>
            Optional. User email
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.ShippingAddress">
            <summary>
            Optional. User shipping address
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.PreCheckoutQuery">
            <summary>
            This object contains information about an incoming pre-checkout query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.Id">
            <summary>
            Unique query identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.From">
            <summary>
            User who sent the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.Currency">
            <summary>
            Three-letter ISO 4217
            <see href="https://core.telegram.org/bots/payments#supported-currencies">currency</see> code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.TotalAmount">
            <summary>
            Total price in the <i>smallest units</i> of the
            <see href="https://core.telegram.org/bots/payments#supported-currencies">currency</see>
            (integer, <b>not</b> float/double).
            <para>
            For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter in
            <see href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</see>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.InvoicePayload">
            <summary>
            Bot specified invoice payload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.ShippingOptionId">
            <summary>
            Optional. Identifier of the shipping option chosen by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.OrderInfo">
            <summary>
            Optional. Order info provided by the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingAddress">
            <summary>
            This object represents a shipping address.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.CountryCode">
            <summary>
            ISO 3166-1 alpha-2 country code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.State">
            <summary>
            State, if applicable
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.StreetLine1">
            <summary>
            First line for the address
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.StreetLine2">
            <summary>
            Second line for the address
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.PostCode">
            <summary>
            Address post code
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingOption">
            <summary>
            This object represents one shipping option.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Id">
            <summary>
            Shipping option identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Title">
            <summary>
            Option title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Prices">
            <summary>
            List of price portions
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingQuery">
            <summary>
            This object contains information about an incoming shipping query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.Id">
            <summary>
            Unique query identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.From">
            <summary>
            User who sent the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.InvoicePayload">
            <summary>
            Bot specified invoice payload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.ShippingAddress">
            <summary>
            User specified shipping address
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.SuccessfulPayment">
            <summary>
            This object contains basic information about a successful payment.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.Currency">
            <summary>
            Three-letter ISO 4217
            <see href="https://core.telegram.org/bots/payments#supported-currencies">currency</see> code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.TotalAmount">
            <summary>
            Total price in the <i>smallest units</i> of the
            <see href="https://core.telegram.org/bots/payments#supported-currencies">currency</see>
            (integer, <b>not</b> float/double).
            <para>
            For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter
            in <see href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</see>, it shows
            the number of digits past the decimal point for each currency (2 for the majority of currencies).
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.InvoicePayload">
            <summary>
            Bot specified invoice payload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.ShippingOptionId">
            <summary>
            Optional. Identifier of the shipping option chosen by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.OrderInfo">
            <summary>
            Optional. Order info provided by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.TelegramPaymentChargeId">
            <summary>
            Telegram payment identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.ProviderPaymentChargeId">
            <summary>
            Provider payment identifier
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.PhotoSize">
            <summary>
            This object represents one size of a photo or a <see cref="T:Telegram.Bot.Types.Document">file</see> / <see cref="T:Telegram.Bot.Types.Sticker">sticker</see> thumbnail.
            </summary>
            <remarks>A missing thumbnail for a file (or sticker) is presented as an empty object.</remarks>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Width">
            <summary>
            Photo width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Height">
            <summary>
            Photo height
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Poll">
            <summary>
            This object contains information about a poll.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Id">
            <summary>
            Unique poll identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Question">
            <summary>
            Poll question, 1-300 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Options">
            <summary>
            List of poll options
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.TotalVoterCount">
            <summary>
            Total number of users that voted in the poll
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.IsClosed">
            <summary>
            True, if the poll is closed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.IsAnonymous">
            <summary>
            True, if the poll is anonymous
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Type">
            <summary>
            Poll type, currently can be “regular” or “quiz”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.AllowsMultipleAnswers">
            <summary>
            True, if the poll allows multiple answers
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.CorrectOptionId">
            <summary>
            Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode,
            which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Explanation">
            <summary>
            Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
            quiz-style poll, 0-200 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.ExplanationEntities">
            <summary>
            Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the
            <see cref="P:Telegram.Bot.Types.Poll.Explanation"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.OpenPeriod">
            <summary>
            Optional. Amount of time in seconds the poll will be active after creation
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.CloseDate">
            <summary>
            Optional. Point in time when the poll will be automatically closed
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.PollAnswer">
            <summary>
            This object represents an answer of a user in a non-anonymous poll.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.PollId">
            <summary>
            Unique poll identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.User">
            <summary>
            The user, who changed the answer to the poll
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.OptionIds">
            <summary>
            0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.PollOption">
            <summary>
            This object contains information about one answer option in a poll.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollOption.Text">
            <summary>
            Option text, 1-100 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollOption.VoterCount">
            <summary>
            Number of users that voted for this option
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ProximityAlertTriggered">
            <summary>
            Represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set
            by another user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Traveler">
            <summary>
            User that triggered the alert
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Watcher">
            <summary>
            User that set the alert
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Distance">
            <summary>
            The distance between the users
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">
            <summary>
            Upon receiving a <see cref="T:Telegram.Bot.Types.Message"/> with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice <see href="https://core.telegram.org/bots#privacy-mode">privacy mode</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup.ForceReply">
            <summary>
            Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup.InputFieldPlaceholder">
            <summary>
            Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.IKeyboardButton">
            <summary>
            Marker interface for a regular or inline button of the reply keyboard
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.IKeyboardButton.Text">
            <summary>
            Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">
            <summary>
            This object represents one button of an inline keyboard.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Text">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Url">
            <summary>
            Optional. HTTP or tg:// url to be opened when button is pressed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.LoginUrl">
            <summary>
            Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the <see href="https://core.telegram.org/widgets/login">Telegram Login Widget</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.CallbackData">
            <summary>
            Optional. Data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when button is pressed, 1-64 bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQuery">
            <summary>
            Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.
            </summary>
            <remarks>
            Note: This offers an easy way for users to start using your bot in <see href="https://core.telegram.org/bots/inline">inline mode</see> when they are currently in a private chat with it. Especially useful when combined with <see cref="T:Telegram.Bot.Requests.AnswerInlineQueryRequest">SwitchPm…</see> actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQueryCurrentChat">
            <summary>
            Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.
            </summary>
            <remarks>
            This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.CallbackGame">
            <summary>
            Optional. Description of the game that will be launched when the user presses the button.
            </summary>
            <remarks>
            <b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Pay">
            <summary>
            Optional. Specify True, to send a <see href="https://core.telegram.org/bots/api#payments">Pay button</see>.
            </summary>
            <remarks>
            <b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.#ctor(System.String)">
            <summary>
            Instantiates new Inline Keyboard object
            </summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithUrl(System.String,System.String)">
            <summary>
            Creates an inline keyboard button that opens a HTTP url when pressed
            </summary>
            <param name="text">Label text on the button</param>
            <param name="url">HTTP or tg:// url to be opened when button is pressed</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithLoginUrl(System.String,Telegram.Bot.Types.LoginUrl)">
            <summary>
            Creates an inline keyboard button that opens a HTTP url to automatically authorize the user
            </summary>
            <param name="text">Label text on the button</param>
            <param name="loginUrl">An HTTP URL used to automatically authorize the user. Can be used as a replacement for the <see href="https://core.telegram.org/widgets/login">Telegram Login Widget</see>.</param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData(System.String)">
            <summary>
            Creates an inline keyboard button that sends <see cref="T:Telegram.Bot.Types.CallbackQuery"/> to bot when pressed
            </summary>
            <param name="textAndCallbackData">Text and data of the button to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when button is pressed, 1-64 bytes</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData(System.String,System.String)">
            <summary>
            Creates an inline keyboard button that sends <see cref="T:Telegram.Bot.Types.CallbackQuery"/> to bot when pressed
            </summary>
            <param name="text">Label text on the button</param>
            <param name="callbackData">Data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when button is pressed, 1-64 bytes</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQuery(System.String,System.String)">
            <summary>
            Creates an inline keyboard button. Pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field.
            </summary>
            <param name="text">Label text on the button</param>
            <param name="query">If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.</param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQueryCurrentChat(System.String,System.String)">
            <summary>
            Creates an inline keyboard button. Pressing the button will insert the bot's username and the specified inline query in the current chat's input field.
            </summary>
            <param name="text">Label text on the button</param>
            <param name="query">If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallBackGame(System.String,Telegram.Bot.Types.CallbackGame)">
            <summary>
            Creates an inline keyboard button. Pressing the button will launch the game.
            </summary>
            <param name="text">Label text on the button</param>
            <param name="callbackGame">Description of the game that will be launched when the user presses the button.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithPayment(System.String)">
            <summary>
            Creates an inline keyboard button for a PayButton
            </summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> with callback data
            </summary>
            <param name="textAndCallbackData">Label text and callback data of the button</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            This object represents an inline keyboard that appears right next to the <see cref="T:Telegram.Bot.Types.Message"/> it belongs to.
            </summary>
            <remarks>
            Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will display
            <i>unsupported message</i>.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.InlineKeyboard">
            <summary>
            Array of <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> rows, each represented by an Array of
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/>.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with only one keyboard button
            </summary>
            <param name="inlineKeyboardButton">Keyboard button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with a one-row keyboard
            </summary>
            <param name="inlineKeyboardRow">The inline keyboard row</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class.
            </summary>
            <param name="inlineKeyboard">The inline keyboard.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.Empty">
            <summary>
            Generate an empty inline keyboard markup
            </summary>
            <returns>Empty inline keyboard markup</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup with one button
            </summary>
            <param name="button">Inline keyboard button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup with one button
            </summary>
            <param name="buttonText">Text of the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton}[])~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup from multiple buttons
            </summary>
            <param name="inlineKeyboard">Keyboard buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton[])~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup from multiple buttons on 1 row
            </summary>
            <param name="inlineKeyboard">Keyboard buttons</param>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.IReplyMarkup">
            <summary>
            A marker interface for reply markups that define how a <see cref="T:Telegram.Bot.Types.User"/> can reply to the sent <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton">
            <summary>
            This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.Text">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestContact">
            <summary>
            Optional. If <c>true</c>, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestLocation">
            <summary>
            Optional. If <c>true</c>, the user's current location will be sent when the button is pressed. Available in private chats only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestPoll">
            <summary>
            Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/> class.
            </summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestContact(System.String)">
            <summary>
            Generate a keyboard button to request for contact
            </summary>
            <param name="text">Button's text</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestLocation(System.String)">
            <summary>
            Generate a keyboard button to request for location
            </summary>
            <param name="text">Button's text</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestPoll(System.String,System.String)">
            <summary>
            Generate a keyboard button to request a poll
            </summary>
            <param name="text">Button's text</param>
            <param name="type">Poll's type</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.KeyboardButton">
            <summary>
            Generate a keyboard button from text
            </summary>
            <param name="text">Button's text</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType">
            <summary>
            This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType.Type">
            <summary>
            Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Represents a custom keyboard with reply options
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.Keyboard">
            <summary>
            Array of button rows, each represented by an Array of KeyboardButton objects
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.ResizeKeyboard">
            <summary>
            Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.OneTimeKeyboard">
            <summary>
            Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to false.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.InputFieldPlaceholder">
            <summary>
            Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.KeyboardButton)">
            <summary>
            Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/> with one button
            </summary>
            <param name="button">Button on keyboard</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.KeyboardButton})">
            <summary>
            Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>
            </summary>
            <param name="keyboardRow">The keyboard row.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.KeyboardButton}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/> class.
            </summary>
            <param name="keyboard">The keyboard.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Generates a reply keyboard markup with one button
            </summary>
            <param name="text">Button's text</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String[])~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Generates a reply keyboard markup with multiple buttons on one row
            </summary>
            <param name="texts">Texts of buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String[][])~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Generates a reply keyboard markup with multiple buttons
            </summary>
            <param name="textsItems">Texts of buttons</param>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">
            <summary>
            Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove.RemoveKeyboard">
            <summary>
            Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use '<see cref="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.OneTimeKeyboard"/>' in <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyMarkupBase">
            <summary>
            Defines how clients display a reply interface to the <see cref="T:Telegram.Bot.Types.User"/>
            </summary>
            <seealso cref="T:Telegram.Bot.Types.ReplyMarkups.IReplyMarkup" />
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyMarkupBase.Selective">
            <summary>
            Optional. Use this parameter if you want to show the keyboard to specific users only. Targets:
            <list type="number">
            <item>
            users that are @mentioned in the <see cref="P:Telegram.Bot.Types.Message.Text"/> of the <see cref="T:Telegram.Bot.Types.Message"/> object;
            </item>
            <item>
            if the bot's message is a reply (has <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/>), sender of the original
            message.
            </item>
            </list>
            </summary>
            <remarks>
            <i>Example:</i> A user requests to change the bot's language, bot replies to the request with a keyboard to select
            the new language. Other users in the group don't see the keyboard.
            </remarks>
        </member>
        <member name="T:Telegram.Bot.Types.ResponseParameters">
            <summary>
            Contains information about why a request was unsuccessful.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ResponseParameters.MigrateToChatId">
            <summary>
            The group has been migrated to a supergroup with the specified identifier.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ResponseParameters.RetryAfter">
            <summary>
            In case of exceeding flood control, the number of seconds left to wait before the request can be repeated.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Sticker">
            <summary>
            This object represents a sticker.
            <see href="https://core.telegram.org/bots/api#sticker"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Width">
            <summary>
            Sticker width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Height">
            <summary>
            Sticker height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.IsAnimated">
            <summary>
            True, if the sticker is animated
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Thumb">
            <summary>
            Optional. Sticker thumbnail in the .WEBP or .JPG format
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Emoji">
            <summary>
            Optional. Emoji associated with the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.SetName">
            <summary>
            Optional. Name of the sticker set to which the sticker belongs
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.MaskPosition">
            <summary>
            Optional. For mask stickers, the position where the mask should be placed
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.StickerSet">
            <summary>
            This object represents a sticker set.
            <see href="https://core.telegram.org/bots/api#stickerset"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Name">
            <summary>
            Sticker set name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Title">
            <summary>
            Sticker set title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.IsAnimated">
            <summary>
            True, if the sticker set contains animated stickers
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.ContainsMasks">
            <summary>
            True, if the sticker set contains masks
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Stickers">
            <summary>
            List of all set stickers
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Thumb">
            <summary>
            Optional. Sticker set thumbnail in the .WEBP or .TGS format
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Update">
            <summary>
            This object represents an incoming update.
            </summary>
            <remarks>
            Only <b>one</b> of the optional parameters can be present in any given update.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Id">
            <summary>
            The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using <see href="https://core.telegram.org/bots/api#setwebhook">Webhooks</see>, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Message">
            <summary>
            Optional. New incoming message of any kind — text, photo, sticker, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedMessage">
            <summary>
            Optional. New version of a message that is known to the bot and was edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChannelPost">
            <summary>
            Optional. New incoming channel post of any kind — text, photo, sticker, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedChannelPost">
            <summary>
            Optional. New version of a channel post that is known to the bot and was edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.InlineQuery">
            <summary>
            Optional. New incoming inline query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChosenInlineResult">
            <summary>
            Optional. The result of a inline query that was chosen by a user and sent to their chat partner
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.CallbackQuery">
            <summary>
            Optional. New incoming callback query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ShippingQuery">
            <summary>
            Optional. New incoming shipping query. Only for invoices with flexible price
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.PreCheckoutQuery">
            <summary>
            Optional. New incoming pre-checkout query. Contains full information about checkout
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Poll">
            <summary>
            Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.PollAnswer">
            <summary>
            Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.MyChatMember">
            <summary>
            Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatMember">
            <summary>
            Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify “<see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>” in the list of allowed_updates to receive these updates.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatJoinRequest">
            <summary>
            Optional. A request to join the chat has been sent. The bot must have the
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right in the chat to receive these updates.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Type">
            <summary>
            Gets the update type.
            </summary>
            <value>
            The update type.
            </value>
        </member>
        <member name="T:Telegram.Bot.Types.User">
            <summary>
            This object represents a Telegram user or bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.Id">
            <summary>
            Unique identifier for this user or bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.IsBot">
            <summary>
            True, if this user is a bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.FirstName">
            <summary>
            User's or bot's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.LastName">
            <summary>
            Optional. User's or bot's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.Username">
            <summary>
            Optional. User's or bot's username
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.LanguageCode">
            <summary>
            Optional. <see href="https://en.wikipedia.org/wiki/IETF_language_tag">IETF language tag</see> of the user's language
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanJoinGroups">
            <summary>
            Optional. True, if the bot can be invited to groups. Returned only in <see cref="T:Telegram.Bot.Requests.GetMeRequest"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanReadAllGroupMessages">
            <summary>
            Optional. True, if privacy mode is disabled for the bot. Returned only in <see cref="T:Telegram.Bot.Requests.GetMeRequest"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.SupportsInlineQueries">
            <summary>
            Optional. True, if the bot supports inline queries. Returned only in <see cref="T:Telegram.Bot.Requests.GetMeRequest"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.User.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Types.UserProfilePhotos">
            <summary>
            This object represent a user's profile pictures.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.TotalCount">
            <summary>
            Total number of profile pictures the target user has
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.Photos">
            <summary>
            Requested profile pictures (in up to 4 sizes each)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Venue">
            <summary>
            This object represents a venue.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Location">
            <summary>
            Venue location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Title">
            <summary>
            Name of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.FoursquareType">
            <summary>
            Optional. Foursquare type of the venue. (For example, "arts_entertainment/default",
            "arts_entertainment/aquarium" or "food/icecream".)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.GooglePlaceId">
            <summary>
            Optional. Google Places identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.GooglePlaceType">
            <summary>
            Optional. Google Places type of the venue. (See
            <see href="https://developers.google.com/places/web-service/supported_types">supported types</see>.)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Video">
            <summary>
            This object represents a video file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Width">
            <summary>
            Video width as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Height">
            <summary>
            Video height as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Duration">
            <summary>
            Duration of the video in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Thumb">
            <summary>
            Optional. Video thumbnail
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.FileName">
            <summary>
            Optional. Original filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.MimeType">
            <summary>
            Optional. Mime type of a file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoNote">
            <summary>
            This object represents a <see href="https://telegram.org/blog/video-messages-and-telescope">video message</see>
            (available in Telegram apps as of
            <see href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</see>).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Length">
            <summary>
            Video width and height (diameter of the video message) as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Duration">
            <summary>
            Duration of the video in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Thumb">
            <summary>
            Optional. Video thumbnail
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Voice">
            <summary>
            This object represents a voice note.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.Duration">
            <summary>
            Duration of the audio in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VoiceChatEnded">
            <summary>
            This object represents a service message about a voice chat ended in the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VoiceChatEnded.Duration">
            <summary>
            Voice chat duration; in seconds
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VoiceChatParticipantsInvited">
            <summary>
            This object represents a service message about new members invited to a voice chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VoiceChatParticipantsInvited.Users">
            <summary>
            Optional. New members that were invited to the voice chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VoiceChatScheduled">
            <summary>
            This object represents a service message about a voice chat scheduled in the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VoiceChatScheduled.StartDate">
            <summary>
            Point in time when the voice chat is supposed to be started by a chat administrator
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VoiceChatStarted">
            <summary>
            This object represents a service message about a voice chat started in the chat. Currently holds no information.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.WebhookInfo">
            <summary>
            Contains information about the current status of a webhook.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.Url">
            <summary>
            Webhook URL, may be empty if webhook is not set up
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.HasCustomCertificate">
            <summary>
            True, if a custom certificate was provided for webhook certificate checks
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.PendingUpdateCount">
            <summary>
            Number of updates awaiting delivery
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.IpAddress">
            <summary>
            Optional. Currently used webhook IP address
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastErrorDate">
            <summary>
            Optional. Time for the most recent error that happened when trying to deliver an update via webhook
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastErrorMessage">
            <summary>
            Optional. Error message in human-readable format for the most recent error that happened when trying to
            deliver an update via webhook
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.MaxConnections">
            <summary>
            Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.AllowedUpdates">
            <summary>
            Optional. A list of update types the bot is subscribed to. Defaults to all update types except
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>
            </summary>
        </member>
    </members>
</doc>
